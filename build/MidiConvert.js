(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["MidiConvert"] = factory();
	else
		root["MidiConvert"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _Midi = __webpack_require__(1);\n\nvar MidiConvert = {\n\t/**\n  *  Parse all the data from the Midi file into this format:\n  *  {\n  *  \t// the transport and timing data\n  *  \theader : {\n  *  \t\tbpm : Number,                     // tempo, e.g. 120\n  *  \t\ttimeSignature : [Number, Number], // time signature, e.g. [4, 4],\n  *  \t\tPPQ : Number                  // PPQ of the midi file\n  *  \t},\n  *  \t// an array for each of the midi tracks\n  *  \ttracks : [\n  *  \t\t{\n  *  \t\t\tname : String, // the track name if one was given\n  *  \t\t\tnotes : [\n  *  \t\t\t\t{\n  *  \t\t\t\t\ttime : Number, // time in seconds\n  *  \t\t\t\t\tname : String, // note name, e.g. 'C4'\n  *  \t\t\t\t\tmidi : Number, // midi number, e.g. 60\n  *  \t\t\t\t\tvelocity : Number,  // normalized velocity\n  *  \t\t\t\t\tduration : Number   // duration between noteOn and noteOff\n  *  \t\t\t\t}\n  *  \t\t\t],\n  *  \t\t\tcontrolChanges : { //all of the control changes\n  *  \t\t\t\t64 : [ //array for each cc value\n  *  \t\t\t\t\t{\n  *  \t\t\t\t\t\tnumber : Number, //the cc number\n  *  \t\t\t\t\t\ttime : Number, //the time of the event in seconds\n  *  \t\t\t\t\t\tname : String, // if the cc value has a common name (e.g. 'sustain')\n  *  \t\t\t\t\t\tvalue : Number, //the normalized value\n  *  \t\t\t\t\t}\n  *  \t\t\t\t]\n  *  \t\t\t}\n  *  \t\t}\n  *  \t]\n  *  }\n  *  @param  {Binary String}  fileBlob  The output from fs.readFile or FileReader\n  *  @returns {Object} All of the options parsed from the midi file. \n  */\n\tparse: function parse(fileBlob) {\n\t\treturn new _Midi.Midi().decode(fileBlob);\n\t},\n\t/**\n  *  Load and parse a midi file. See `parse` for what the results look like.\n  *  @param  {String}    url\n  *  @param {Function=} callback\n  *  @returns {Promise} A promise which is invoked with the returned Midi object\n  */\n\tload: function load(url, callback) {\n\t\tvar promise = new _Midi.Midi().load(url);\n\t\tif (callback) {\n\t\t\tpromise.then(callback);\n\t\t}\n\t\treturn promise;\n\t},\n\t/**\n  * Create an empty midi file\n  * @return {Midi}\n  */\n\tcreate: function create() {\n\t\treturn new _Midi.Midi();\n\t}\n};\n\nexports.default = MidiConvert;\n\n\nmodule.exports = MidiConvert;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvTWlkaUNvbnZlcnQuanM/NWVhYiJdLCJuYW1lcyI6WyJNaWRpQ29udmVydCIsInBhcnNlIiwiZmlsZUJsb2IiLCJkZWNvZGUiLCJsb2FkIiwidXJsIiwiY2FsbGJhY2siLCJwcm9taXNlIiwidGhlbiIsImNyZWF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUVBLElBQU1BLGNBQWM7QUFDbkI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0NBQyxRQUFRLGVBQVNDLFFBQVQsRUFBa0I7QUFDekIsU0FBTyxpQkFBV0MsTUFBWCxDQUFrQkQsUUFBbEIsQ0FBUDtBQUNBLEVBekNrQjtBQTBDbkI7Ozs7OztBQU1BRSxPQUFPLGNBQVNDLEdBQVQsRUFBY0MsUUFBZCxFQUF1QjtBQUM3QixNQUFNQyxVQUFVLGlCQUFXSCxJQUFYLENBQWdCQyxHQUFoQixDQUFoQjtBQUNBLE1BQUlDLFFBQUosRUFBYTtBQUNaQyxXQUFRQyxJQUFSLENBQWFGLFFBQWI7QUFDQTtBQUNELFNBQU9DLE9BQVA7QUFDQSxFQXREa0I7QUF1RG5COzs7O0FBSUFFLFNBQVMsa0JBQVU7QUFDbEIsU0FBTyxnQkFBUDtBQUNBO0FBN0RrQixDQUFwQjs7a0JBZ0VlVCxXOzs7QUFFZlUsT0FBT0MsT0FBUCxHQUFpQlgsV0FBakIiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TWlkaX0gZnJvbSAnLi9NaWRpJ1xuXG5jb25zdCBNaWRpQ29udmVydCA9IHtcblx0LyoqXG5cdCAqICBQYXJzZSBhbGwgdGhlIGRhdGEgZnJvbSB0aGUgTWlkaSBmaWxlIGludG8gdGhpcyBmb3JtYXQ6XG5cdCAqICB7XG5cdCAqICBcdC8vIHRoZSB0cmFuc3BvcnQgYW5kIHRpbWluZyBkYXRhXG5cdCAqICBcdGhlYWRlciA6IHtcblx0ICogIFx0XHRicG0gOiBOdW1iZXIsICAgICAgICAgICAgICAgICAgICAgLy8gdGVtcG8sIGUuZy4gMTIwXG5cdCAqICBcdFx0dGltZVNpZ25hdHVyZSA6IFtOdW1iZXIsIE51bWJlcl0sIC8vIHRpbWUgc2lnbmF0dXJlLCBlLmcuIFs0LCA0XSxcblx0ICogIFx0XHRQUFEgOiBOdW1iZXIgICAgICAgICAgICAgICAgICAvLyBQUFEgb2YgdGhlIG1pZGkgZmlsZVxuXHQgKiAgXHR9LFxuXHQgKiAgXHQvLyBhbiBhcnJheSBmb3IgZWFjaCBvZiB0aGUgbWlkaSB0cmFja3Ncblx0ICogIFx0dHJhY2tzIDogW1xuXHQgKiAgXHRcdHtcblx0ICogIFx0XHRcdG5hbWUgOiBTdHJpbmcsIC8vIHRoZSB0cmFjayBuYW1lIGlmIG9uZSB3YXMgZ2l2ZW5cblx0ICogIFx0XHRcdG5vdGVzIDogW1xuXHQgKiAgXHRcdFx0XHR7XG5cdCAqICBcdFx0XHRcdFx0dGltZSA6IE51bWJlciwgLy8gdGltZSBpbiBzZWNvbmRzXG5cdCAqICBcdFx0XHRcdFx0bmFtZSA6IFN0cmluZywgLy8gbm90ZSBuYW1lLCBlLmcuICdDNCdcblx0ICogIFx0XHRcdFx0XHRtaWRpIDogTnVtYmVyLCAvLyBtaWRpIG51bWJlciwgZS5nLiA2MFxuXHQgKiAgXHRcdFx0XHRcdHZlbG9jaXR5IDogTnVtYmVyLCAgLy8gbm9ybWFsaXplZCB2ZWxvY2l0eVxuXHQgKiAgXHRcdFx0XHRcdGR1cmF0aW9uIDogTnVtYmVyICAgLy8gZHVyYXRpb24gYmV0d2VlbiBub3RlT24gYW5kIG5vdGVPZmZcblx0ICogIFx0XHRcdFx0fVxuXHQgKiAgXHRcdFx0XSxcblx0ICogIFx0XHRcdGNvbnRyb2xDaGFuZ2VzIDogeyAvL2FsbCBvZiB0aGUgY29udHJvbCBjaGFuZ2VzXG5cdCAqICBcdFx0XHRcdDY0IDogWyAvL2FycmF5IGZvciBlYWNoIGNjIHZhbHVlXG5cdCAqICBcdFx0XHRcdFx0e1xuXHQgKiAgXHRcdFx0XHRcdFx0bnVtYmVyIDogTnVtYmVyLCAvL3RoZSBjYyBudW1iZXJcblx0ICogIFx0XHRcdFx0XHRcdHRpbWUgOiBOdW1iZXIsIC8vdGhlIHRpbWUgb2YgdGhlIGV2ZW50IGluIHNlY29uZHNcblx0ICogIFx0XHRcdFx0XHRcdG5hbWUgOiBTdHJpbmcsIC8vIGlmIHRoZSBjYyB2YWx1ZSBoYXMgYSBjb21tb24gbmFtZSAoZS5nLiAnc3VzdGFpbicpXG5cdCAqICBcdFx0XHRcdFx0XHR2YWx1ZSA6IE51bWJlciwgLy90aGUgbm9ybWFsaXplZCB2YWx1ZVxuXHQgKiAgXHRcdFx0XHRcdH1cblx0ICogIFx0XHRcdFx0XVxuXHQgKiAgXHRcdFx0fVxuXHQgKiAgXHRcdH1cblx0ICogIFx0XVxuXHQgKiAgfVxuXHQgKiAgQHBhcmFtICB7QmluYXJ5IFN0cmluZ30gIGZpbGVCbG9iICBUaGUgb3V0cHV0IGZyb20gZnMucmVhZEZpbGUgb3IgRmlsZVJlYWRlclxuXHQgKiAgQHJldHVybnMge09iamVjdH0gQWxsIG9mIHRoZSBvcHRpb25zIHBhcnNlZCBmcm9tIHRoZSBtaWRpIGZpbGUuIFxuXHQgKi9cblx0cGFyc2UgOiBmdW5jdGlvbihmaWxlQmxvYil7XG5cdFx0cmV0dXJuIG5ldyBNaWRpKCkuZGVjb2RlKGZpbGVCbG9iKVxuXHR9LFxuXHQvKipcblx0ICogIExvYWQgYW5kIHBhcnNlIGEgbWlkaSBmaWxlLiBTZWUgYHBhcnNlYCBmb3Igd2hhdCB0aGUgcmVzdWx0cyBsb29rIGxpa2UuXG5cdCAqICBAcGFyYW0gIHtTdHJpbmd9ICAgIHVybFxuXHQgKiAgQHBhcmFtIHtGdW5jdGlvbj19IGNhbGxiYWNrXG5cdCAqICBAcmV0dXJucyB7UHJvbWlzZX0gQSBwcm9taXNlIHdoaWNoIGlzIGludm9rZWQgd2l0aCB0aGUgcmV0dXJuZWQgTWlkaSBvYmplY3Rcblx0ICovXG5cdGxvYWQgOiBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKXtcblx0XHRjb25zdCBwcm9taXNlID0gbmV3IE1pZGkoKS5sb2FkKHVybClcblx0XHRpZiAoY2FsbGJhY2spe1xuXHRcdFx0cHJvbWlzZS50aGVuKGNhbGxiYWNrKVxuXHRcdH1cblx0XHRyZXR1cm4gcHJvbWlzZVxuXHR9LFxuXHQvKipcblx0ICogQ3JlYXRlIGFuIGVtcHR5IG1pZGkgZmlsZVxuXHQgKiBAcmV0dXJuIHtNaWRpfVxuXHQgKi9cblx0Y3JlYXRlIDogZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gbmV3IE1pZGkoKVxuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1pZGlDb252ZXJ0XG5cbm1vZHVsZS5leHBvcnRzID0gTWlkaUNvbnZlcnRcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9NaWRpQ29udmVydC5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.Midi = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _midiFileParser = __webpack_require__(2);\n\nvar _midiFileParser2 = _interopRequireDefault(_midiFileParser);\n\nvar _jsmidgen = __webpack_require__(3);\n\nvar _jsmidgen2 = _interopRequireDefault(_jsmidgen);\n\nvar _Util = __webpack_require__(5);\n\nvar _Util2 = _interopRequireDefault(_Util);\n\nvar _Track = __webpack_require__(6);\n\nvar _Header = __webpack_require__(11);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @class The Midi object. Contains tracks and the header info.\n */\nvar Midi = function () {\n\tfunction Midi() {\n\t\t_classCallCheck(this, Midi);\n\n\t\tthis.header = {\n\t\t\t//defaults\n\t\t\tbpm: 120,\n\t\t\ttimeSignature: [4, 4],\n\t\t\tPPQ: 480\n\t\t};\n\n\t\tthis.tracks = [];\n\t}\n\n\t/**\n  * Load the given url and parse the midi at that url\n  * @param  {String}   url  \n  * @param {*} data Anything that should be sent in the XHR\n  * @param {String} method Either GET or POST    \n  * @return {Promise}            \n  */\n\n\n\t_createClass(Midi, [{\n\t\tkey: 'load',\n\t\tvalue: function load(url) {\n\t\t\tvar _this = this;\n\n\t\t\tvar data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\t\t\tvar method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';\n\n\t\t\treturn new Promise(function (success, fail) {\n\t\t\t\tvar request = new XMLHttpRequest();\n\t\t\t\trequest.open(method, url);\n\t\t\t\trequest.responseType = 'arraybuffer';\n\t\t\t\t// decode asynchronously\n\t\t\t\trequest.addEventListener('load', function () {\n\t\t\t\t\tif (request.readyState === 4 && request.status === 200) {\n\t\t\t\t\t\tsuccess(_this.decode(request.response));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfail(request.status);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\trequest.addEventListener('error', fail);\n\t\t\t\trequest.send(data);\n\t\t\t});\n\t\t}\n\n\t\t/**\n   * Decode the bytes\n   * @param  {String|ArrayBuffer} bytes The midi file encoded as a string or ArrayBuffer\n   * @return {Midi}       this\n   */\n\n\t}, {\n\t\tkey: 'decode',\n\t\tvalue: function decode(bytes) {\n\t\t\tvar _this2 = this;\n\n\t\t\tif (bytes instanceof ArrayBuffer) {\n\t\t\t\tvar byteArray = new Uint8Array(bytes);\n\t\t\t\tbytes = String.fromCharCode.apply(null, byteArray);\n\t\t\t}\n\n\t\t\tvar midiData = (0, _midiFileParser2.default)(bytes);\n\n\t\t\tthis.header = (0, _Header.parseHeader)(midiData);\n\n\t\t\t//replace the previous tracks\n\t\t\tthis.tracks = [];\n\n\t\t\tmidiData.tracks.forEach(function (trackData) {\n\n\t\t\t\tvar track = new _Track.Track();\n\t\t\t\t_this2.tracks.push(track);\n\n\t\t\t\tvar absoluteTime = 0;\n\t\t\t\ttrackData.forEach(function (event) {\n\t\t\t\t\tabsoluteTime += _Util2.default.ticksToSeconds(event.deltaTime, _this2.header);\n\t\t\t\t\tif (event.type === 'meta' && event.subtype === 'trackName') {\n\t\t\t\t\t\ttrack.name = _Util2.default.cleanName(event.text);\n\t\t\t\t\t} else if (event.subtype === 'noteOn') {\n\t\t\t\t\t\ttrack.noteOn(event.noteNumber, absoluteTime, event.velocity / 127);\n\t\t\t\t\t} else if (event.subtype === 'noteOff') {\n\t\t\t\t\t\ttrack.noteOff(event.noteNumber, absoluteTime);\n\t\t\t\t\t} else if (event.subtype === 'controller' && event.controllerType) {\n\t\t\t\t\t\ttrack.cc(event.controllerType, absoluteTime, event.value / 127);\n\t\t\t\t\t} else if (event.type === 'meta' && event.subtype === 'instrumentName') {\n\t\t\t\t\t\ttrack.instrument = event.text;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * Encode the Midi object as a Buffer String\n   * @returns {String}\n   */\n\n\t}, {\n\t\tkey: 'encode',\n\t\tvalue: function encode() {\n\t\t\tvar _this3 = this;\n\n\t\t\tvar output = new _jsmidgen2.default.File({\n\t\t\t\tticks: this.header.PPQ\n\t\t\t});\n\n\t\t\tthis.tracks.forEach(function (track, i) {\n\t\t\t\tvar trackEncoder = output.addTrack();\n\t\t\t\ttrackEncoder.setTempo(_this3.bpm);\n\t\t\t\ttrack.encode(trackEncoder, _this3.header);\n\t\t\t});\n\t\t\treturn output.toBytes();\n\t\t}\n\n\t\t/**\n   * Conver the output encoding into a Uint8Array\n   * @return {Uint9Array} [description]\n   */\n\n\t}, {\n\t\tkey: 'toUint8Array',\n\t\tvalue: function toUint8Array() {\n\t\t\tvar encodedStr = this.encode();\n\t\t\tvar buffer = new Uint8Array(encodedStr.length);\n\t\t\tfor (var i = 0; i < encodedStr.length; i++) {\n\t\t\t\tbuffer[i] = encodedStr.charCodeAt(i);\n\t\t\t}\n\t\t\treturn buffer;\n\t\t}\n\n\t\t/**\n   * Add a new track.\n   * @param {String=} name Optionally include the name of the track\n   * @returns {Track}\n   */\n\n\t}, {\n\t\tkey: 'track',\n\t\tvalue: function track(name) {\n\t\t\tvar track = new _Track.Track(name);\n\t\t\tthis.tracks.push(track);\n\t\t\treturn track;\n\t\t}\n\n\t\t/**\n   * Get a track either by it's name or track index\n   * @param  {Number|String} trackName\n   * @return {Track}\n   */\n\n\t}, {\n\t\tkey: 'get',\n\t\tvalue: function get(trackName) {\n\t\t\tif (_Util2.default.isNumber(trackName)) {\n\t\t\t\treturn this.tracks[trackName];\n\t\t\t} else {\n\t\t\t\treturn this.tracks.find(function (t) {\n\t\t\t\t\treturn t.name === trackName;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * Slice the midi file between the startTime and endTime. Returns a copy of the\n   * midi\n   * @param {Number} startTime\n   * @param {Number} endTime\n   * @returns {Midi} this\n   */\n\n\t}, {\n\t\tkey: 'slice',\n\t\tvalue: function slice() {\n\t\t\tvar startTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t\t\tvar endTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.duration;\n\n\t\t\tvar midi = new Midi();\n\t\t\tmidi.header = this.header;\n\t\t\tmidi.tracks = this.tracks.map(function (t) {\n\t\t\t\treturn t.slice(startTime, endTime);\n\t\t\t});\n\t\t\treturn midi;\n\t\t}\n\n\t\t/**\n   * the time of the first event\n   * @type {Number}\n   */\n\n\t}, {\n\t\tkey: 'startTime',\n\t\tget: function get() {\n\t\t\tvar startTimes = this.tracks.map(function (t) {\n\t\t\t\treturn t.startTime;\n\t\t\t});\n\t\t\treturn Math.min.apply(Math, startTimes);\n\t\t}\n\n\t\t/**\n   * The bpm of the midi file in beats per minute\n   * @type {Number}\n   */\n\n\t}, {\n\t\tkey: 'bpm',\n\t\tget: function get() {\n\t\t\treturn this.header.bpm;\n\t\t},\n\t\tset: function set(bpm) {\n\t\t\tvar prevTempo = this.header.bpm;\n\t\t\tthis.header.bpm = bpm;\n\t\t\t//adjust the timing of all the notes\n\t\t\tvar ratio = prevTempo / bpm;\n\t\t\tthis.tracks.forEach(function (track) {\n\t\t\t\treturn track.scale(ratio);\n\t\t\t});\n\t\t}\n\n\t\t/**\n   * The timeSignature of the midi file\n   * @type {Array}\n   */\n\n\t}, {\n\t\tkey: 'timeSignature',\n\t\tget: function get() {\n\t\t\treturn this.header.timeSignature;\n\t\t},\n\t\tset: function set(timeSig) {\n\t\t\tthis.header.timeSignature = timeSignature;\n\t\t}\n\n\t\t/** \n   * The duration is the end time of the longest track\n   * @type {Number}\n   */\n\n\t}, {\n\t\tkey: 'duration',\n\t\tget: function get() {\n\t\t\tvar durations = this.tracks.map(function (t) {\n\t\t\t\treturn t.duration;\n\t\t\t});\n\t\t\treturn Math.max.apply(Math, durations);\n\t\t}\n\t}]);\n\n\treturn Midi;\n}();\n\nexports.Midi = Midi;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("// https://github.com/gasman/jasmid\n//\n//\n\nmodule.exports = function(file){\n\treturn MidiFile(file)\n};\n\nfunction MidiFile(data) {\n\tfunction readChunk(stream) {\n\t\tvar id = stream.read(4);\n\t\tvar length = stream.readInt32();\n\t\treturn {\n\t\t\t'id': id,\n\t\t\t'length': length,\n\t\t\t'data': stream.read(length)\n\t\t};\n\t}\n\t\n\tvar lastEventTypeByte;\n\t\n\tfunction readEvent(stream) {\n\t\tvar event = {};\n\t\tevent.deltaTime = stream.readVarInt();\n\t\tvar eventTypeByte = stream.readInt8();\n\t\tif ((eventTypeByte & 0xf0) == 0xf0) {\n\t\t\t/* system / meta event */\n\t\t\tif (eventTypeByte == 0xff) {\n\t\t\t\t/* meta event */\n\t\t\t\tevent.type = 'meta';\n\t\t\t\tvar subtypeByte = stream.readInt8();\n\t\t\t\tvar length = stream.readVarInt();\n\t\t\t\tswitch(subtypeByte) {\n\t\t\t\t\tcase 0x00:\n\t\t\t\t\t\tevent.subtype = 'sequenceNumber';\n\t\t\t\t\t\tif (length != 2) throw \"Expected length for sequenceNumber event is 2, got \" + length;\n\t\t\t\t\t\tevent.number = stream.readInt16();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x01:\n\t\t\t\t\t\tevent.subtype = 'text';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x02:\n\t\t\t\t\t\tevent.subtype = 'copyrightNotice';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x03:\n\t\t\t\t\t\tevent.subtype = 'trackName';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x04:\n\t\t\t\t\t\tevent.subtype = 'instrumentName';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x05:\n\t\t\t\t\t\tevent.subtype = 'lyrics';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x06:\n\t\t\t\t\t\tevent.subtype = 'marker';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x07:\n\t\t\t\t\t\tevent.subtype = 'cuePoint';\n\t\t\t\t\t\tevent.text = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x20:\n\t\t\t\t\t\tevent.subtype = 'midiChannelPrefix';\n\t\t\t\t\t\tif (length != 1) throw \"Expected length for midiChannelPrefix event is 1, got \" + length;\n\t\t\t\t\t\tevent.channel = stream.readInt8();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x2f:\n\t\t\t\t\t\tevent.subtype = 'endOfTrack';\n\t\t\t\t\t\tif (length != 0) throw \"Expected length for endOfTrack event is 0, got \" + length;\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x51:\n\t\t\t\t\t\tevent.subtype = 'setTempo';\n\t\t\t\t\t\tif (length != 3) throw \"Expected length for setTempo event is 3, got \" + length;\n\t\t\t\t\t\tevent.microsecondsPerBeat = (\n\t\t\t\t\t\t\t(stream.readInt8() << 16)\n\t\t\t\t\t\t\t+ (stream.readInt8() << 8)\n\t\t\t\t\t\t\t+ stream.readInt8()\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x54:\n\t\t\t\t\t\tevent.subtype = 'smpteOffset';\n\t\t\t\t\t\tif (length != 5) throw \"Expected length for smpteOffset event is 5, got \" + length;\n\t\t\t\t\t\tvar hourByte = stream.readInt8();\n\t\t\t\t\t\tevent.frameRate = {\n\t\t\t\t\t\t\t0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30\n\t\t\t\t\t\t}[hourByte & 0x60];\n\t\t\t\t\t\tevent.hour = hourByte & 0x1f;\n\t\t\t\t\t\tevent.min = stream.readInt8();\n\t\t\t\t\t\tevent.sec = stream.readInt8();\n\t\t\t\t\t\tevent.frame = stream.readInt8();\n\t\t\t\t\t\tevent.subframe = stream.readInt8();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x58:\n\t\t\t\t\t\tevent.subtype = 'timeSignature';\n\t\t\t\t\t\tif (length != 4) throw \"Expected length for timeSignature event is 4, got \" + length;\n\t\t\t\t\t\tevent.numerator = stream.readInt8();\n\t\t\t\t\t\tevent.denominator = Math.pow(2, stream.readInt8());\n\t\t\t\t\t\tevent.metronome = stream.readInt8();\n\t\t\t\t\t\tevent.thirtyseconds = stream.readInt8();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x59:\n\t\t\t\t\t\tevent.subtype = 'keySignature';\n\t\t\t\t\t\tif (length != 2) throw \"Expected length for keySignature event is 2, got \" + length;\n\t\t\t\t\t\tevent.key = stream.readInt8(true);\n\t\t\t\t\t\tevent.scale = stream.readInt8();\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tcase 0x7f:\n\t\t\t\t\t\tevent.subtype = 'sequencerSpecific';\n\t\t\t\t\t\tevent.data = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// console.log(\"Unrecognised meta event subtype: \" + subtypeByte);\n\t\t\t\t\t\tevent.subtype = 'unknown'\n\t\t\t\t\t\tevent.data = stream.read(length);\n\t\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t\tevent.data = stream.read(length);\n\t\t\t\treturn event;\n\t\t\t} else if (eventTypeByte == 0xf0) {\n\t\t\t\tevent.type = 'sysEx';\n\t\t\t\tvar length = stream.readVarInt();\n\t\t\t\tevent.data = stream.read(length);\n\t\t\t\treturn event;\n\t\t\t} else if (eventTypeByte == 0xf7) {\n\t\t\t\tevent.type = 'dividedSysEx';\n\t\t\t\tvar length = stream.readVarInt();\n\t\t\t\tevent.data = stream.read(length);\n\t\t\t\treturn event;\n\t\t\t} else {\n\t\t\t\tthrow \"Unrecognised MIDI event type byte: \" + eventTypeByte;\n\t\t\t}\n\t\t} else {\n\t\t\t/* channel event */\n\t\t\tvar param1;\n\t\t\tif ((eventTypeByte & 0x80) == 0) {\n\t\t\t\t/* running status - reuse lastEventTypeByte as the event type.\n\t\t\t\t\teventTypeByte is actually the first parameter\n\t\t\t\t*/\n\t\t\t\tparam1 = eventTypeByte;\n\t\t\t\teventTypeByte = lastEventTypeByte;\n\t\t\t} else {\n\t\t\t\tparam1 = stream.readInt8();\n\t\t\t\tlastEventTypeByte = eventTypeByte;\n\t\t\t}\n\t\t\tvar eventType = eventTypeByte >> 4;\n\t\t\tevent.channel = eventTypeByte & 0x0f;\n\t\t\tevent.type = 'channel';\n\t\t\tswitch (eventType) {\n\t\t\t\tcase 0x08:\n\t\t\t\t\tevent.subtype = 'noteOff';\n\t\t\t\t\tevent.noteNumber = param1;\n\t\t\t\t\tevent.velocity = stream.readInt8();\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x09:\n\t\t\t\t\tevent.noteNumber = param1;\n\t\t\t\t\tevent.velocity = stream.readInt8();\n\t\t\t\t\tif (event.velocity == 0) {\n\t\t\t\t\t\tevent.subtype = 'noteOff';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tevent.subtype = 'noteOn';\n\t\t\t\t\t}\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0a:\n\t\t\t\t\tevent.subtype = 'noteAftertouch';\n\t\t\t\t\tevent.noteNumber = param1;\n\t\t\t\t\tevent.amount = stream.readInt8();\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0b:\n\t\t\t\t\tevent.subtype = 'controller';\n\t\t\t\t\tevent.controllerType = param1;\n\t\t\t\t\tevent.value = stream.readInt8();\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0c:\n\t\t\t\t\tevent.subtype = 'programChange';\n\t\t\t\t\tevent.programNumber = param1;\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0d:\n\t\t\t\t\tevent.subtype = 'channelAftertouch';\n\t\t\t\t\tevent.amount = param1;\n\t\t\t\t\treturn event;\n\t\t\t\tcase 0x0e:\n\t\t\t\t\tevent.subtype = 'pitchBend';\n\t\t\t\t\tevent.value = param1 + (stream.readInt8() << 7);\n\t\t\t\t\treturn event;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow \"Unrecognised MIDI event type: \" + eventType\n\t\t\t\t\t/* \n\t\t\t\t\tconsole.log(\"Unrecognised MIDI event type: \" + eventType);\n\t\t\t\t\tstream.readInt8();\n\t\t\t\t\tevent.subtype = 'unknown';\n\t\t\t\t\treturn event;\n\t\t\t\t\t*/\n\t\t\t}\n\t\t}\n\t}\n\t\n\tstream = Stream(data);\n\tvar headerChunk = readChunk(stream);\n\tif (headerChunk.id != 'MThd' || headerChunk.length != 6) {\n\t\tthrow \"Bad .mid file - header not found\";\n\t}\n\tvar headerStream = Stream(headerChunk.data);\n\tvar formatType = headerStream.readInt16();\n\tvar trackCount = headerStream.readInt16();\n\tvar timeDivision = headerStream.readInt16();\n\t\n\tif (timeDivision & 0x8000) {\n\t\tthrow \"Expressing time division in SMTPE frames is not supported yet\"\n\t} else {\n\t\tticksPerBeat = timeDivision;\n\t}\n\t\n\tvar header = {\n\t\t'formatType': formatType,\n\t\t'trackCount': trackCount,\n\t\t'ticksPerBeat': ticksPerBeat\n\t}\n\tvar tracks = [];\n\tfor (var i = 0; i < header.trackCount; i++) {\n\t\ttracks[i] = [];\n\t\tvar trackChunk = readChunk(stream);\n\t\tif (trackChunk.id != 'MTrk') {\n\t\t\tthrow \"Unexpected chunk - expected MTrk, got \"+ trackChunk.id;\n\t\t}\n\t\tvar trackStream = Stream(trackChunk.data);\n\t\twhile (!trackStream.eof()) {\n\t\t\tvar event = readEvent(trackStream);\n\t\t\ttracks[i].push(event);\n\t\t\t//console.log(event);\n\t\t}\n\t}\n\t\n\treturn {\n\t\t'header': header,\n\t\t'tracks': tracks\n\t}\n};\n\n/* Wrapper for accessing strings through sequential reads */\nfunction Stream(str) {\n\tvar position = 0;\n\t\n\tfunction read(length) {\n\t\tvar result = str.substr(position, length);\n\t\tposition += length;\n\t\treturn result;\n\t}\n\t\n\t/* read a big-endian 32-bit integer */\n\tfunction readInt32() {\n\t\tvar result = (\n\t\t\t(str.charCodeAt(position) << 24)\n\t\t\t+ (str.charCodeAt(position + 1) << 16)\n\t\t\t+ (str.charCodeAt(position + 2) << 8)\n\t\t\t+ str.charCodeAt(position + 3));\n\t\tposition += 4;\n\t\treturn result;\n\t}\n\n\t/* read a big-endian 16-bit integer */\n\tfunction readInt16() {\n\t\tvar result = (\n\t\t\t(str.charCodeAt(position) << 8)\n\t\t\t+ str.charCodeAt(position + 1));\n\t\tposition += 2;\n\t\treturn result;\n\t}\n\t\n\t/* read an 8-bit integer */\n\tfunction readInt8(signed) {\n\t\tvar result = str.charCodeAt(position);\n\t\tif (signed && result > 127) result -= 256;\n\t\tposition += 1;\n\t\treturn result;\n\t}\n\t\n\tfunction eof() {\n\t\treturn position >= str.length;\n\t}\n\t\n\t/* read a MIDI-style variable-length integer\n\t\t(big-endian value in groups of 7 bits,\n\t\twith top bit set to signify that another byte follows)\n\t*/\n\tfunction readVarInt() {\n\t\tvar result = 0;\n\t\twhile (true) {\n\t\t\tvar b = readInt8();\n\t\t\tif (b & 0x80) {\n\t\t\t\tresult += (b & 0x7f);\n\t\t\t\tresult <<= 7;\n\t\t\t} else {\n\t\t\t\t/* b is the last byte */\n\t\t\t\treturn result + b;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn {\n\t\t'eof': eof,\n\t\t'read': read,\n\t\t'readInt32': readInt32,\n\t\t'readInt16': readInt16,\n\t\t'readInt8': readInt8,\n\t\t'readVarInt': readVarInt\n\t}\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L21pZGktZmlsZS1wYXJzZXIvaW5kZXguanM/ODZlNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix1QkFBdUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL2dhc21hbi9qYXNtaWRcbi8vXG4vL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZpbGUpe1xuXHRyZXR1cm4gTWlkaUZpbGUoZmlsZSlcbn07XG5cbmZ1bmN0aW9uIE1pZGlGaWxlKGRhdGEpIHtcblx0ZnVuY3Rpb24gcmVhZENodW5rKHN0cmVhbSkge1xuXHRcdHZhciBpZCA9IHN0cmVhbS5yZWFkKDQpO1xuXHRcdHZhciBsZW5ndGggPSBzdHJlYW0ucmVhZEludDMyKCk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdCdpZCc6IGlkLFxuXHRcdFx0J2xlbmd0aCc6IGxlbmd0aCxcblx0XHRcdCdkYXRhJzogc3RyZWFtLnJlYWQobGVuZ3RoKVxuXHRcdH07XG5cdH1cblx0XG5cdHZhciBsYXN0RXZlbnRUeXBlQnl0ZTtcblx0XG5cdGZ1bmN0aW9uIHJlYWRFdmVudChzdHJlYW0pIHtcblx0XHR2YXIgZXZlbnQgPSB7fTtcblx0XHRldmVudC5kZWx0YVRpbWUgPSBzdHJlYW0ucmVhZFZhckludCgpO1xuXHRcdHZhciBldmVudFR5cGVCeXRlID0gc3RyZWFtLnJlYWRJbnQ4KCk7XG5cdFx0aWYgKChldmVudFR5cGVCeXRlICYgMHhmMCkgPT0gMHhmMCkge1xuXHRcdFx0Lyogc3lzdGVtIC8gbWV0YSBldmVudCAqL1xuXHRcdFx0aWYgKGV2ZW50VHlwZUJ5dGUgPT0gMHhmZikge1xuXHRcdFx0XHQvKiBtZXRhIGV2ZW50ICovXG5cdFx0XHRcdGV2ZW50LnR5cGUgPSAnbWV0YSc7XG5cdFx0XHRcdHZhciBzdWJ0eXBlQnl0ZSA9IHN0cmVhbS5yZWFkSW50OCgpO1xuXHRcdFx0XHR2YXIgbGVuZ3RoID0gc3RyZWFtLnJlYWRWYXJJbnQoKTtcblx0XHRcdFx0c3dpdGNoKHN1YnR5cGVCeXRlKSB7XG5cdFx0XHRcdFx0Y2FzZSAweDAwOlxuXHRcdFx0XHRcdFx0ZXZlbnQuc3VidHlwZSA9ICdzZXF1ZW5jZU51bWJlcic7XG5cdFx0XHRcdFx0XHRpZiAobGVuZ3RoICE9IDIpIHRocm93IFwiRXhwZWN0ZWQgbGVuZ3RoIGZvciBzZXF1ZW5jZU51bWJlciBldmVudCBpcyAyLCBnb3QgXCIgKyBsZW5ndGg7XG5cdFx0XHRcdFx0XHRldmVudC5udW1iZXIgPSBzdHJlYW0ucmVhZEludDE2KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0XHRcdFx0Y2FzZSAweDAxOlxuXHRcdFx0XHRcdFx0ZXZlbnQuc3VidHlwZSA9ICd0ZXh0Jztcblx0XHRcdFx0XHRcdGV2ZW50LnRleHQgPSBzdHJlYW0ucmVhZChsZW5ndGgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdFx0XHRcdGNhc2UgMHgwMjpcblx0XHRcdFx0XHRcdGV2ZW50LnN1YnR5cGUgPSAnY29weXJpZ2h0Tm90aWNlJztcblx0XHRcdFx0XHRcdGV2ZW50LnRleHQgPSBzdHJlYW0ucmVhZChsZW5ndGgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdFx0XHRcdGNhc2UgMHgwMzpcblx0XHRcdFx0XHRcdGV2ZW50LnN1YnR5cGUgPSAndHJhY2tOYW1lJztcblx0XHRcdFx0XHRcdGV2ZW50LnRleHQgPSBzdHJlYW0ucmVhZChsZW5ndGgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdFx0XHRcdGNhc2UgMHgwNDpcblx0XHRcdFx0XHRcdGV2ZW50LnN1YnR5cGUgPSAnaW5zdHJ1bWVudE5hbWUnO1xuXHRcdFx0XHRcdFx0ZXZlbnQudGV4dCA9IHN0cmVhbS5yZWFkKGxlbmd0aCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0XHRcdFx0Y2FzZSAweDA1OlxuXHRcdFx0XHRcdFx0ZXZlbnQuc3VidHlwZSA9ICdseXJpY3MnO1xuXHRcdFx0XHRcdFx0ZXZlbnQudGV4dCA9IHN0cmVhbS5yZWFkKGxlbmd0aCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0XHRcdFx0Y2FzZSAweDA2OlxuXHRcdFx0XHRcdFx0ZXZlbnQuc3VidHlwZSA9ICdtYXJrZXInO1xuXHRcdFx0XHRcdFx0ZXZlbnQudGV4dCA9IHN0cmVhbS5yZWFkKGxlbmd0aCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0XHRcdFx0Y2FzZSAweDA3OlxuXHRcdFx0XHRcdFx0ZXZlbnQuc3VidHlwZSA9ICdjdWVQb2ludCc7XG5cdFx0XHRcdFx0XHRldmVudC50ZXh0ID0gc3RyZWFtLnJlYWQobGVuZ3RoKTtcblx0XHRcdFx0XHRcdHJldHVybiBldmVudDtcblx0XHRcdFx0XHRjYXNlIDB4MjA6XG5cdFx0XHRcdFx0XHRldmVudC5zdWJ0eXBlID0gJ21pZGlDaGFubmVsUHJlZml4Jztcblx0XHRcdFx0XHRcdGlmIChsZW5ndGggIT0gMSkgdGhyb3cgXCJFeHBlY3RlZCBsZW5ndGggZm9yIG1pZGlDaGFubmVsUHJlZml4IGV2ZW50IGlzIDEsIGdvdCBcIiArIGxlbmd0aDtcblx0XHRcdFx0XHRcdGV2ZW50LmNoYW5uZWwgPSBzdHJlYW0ucmVhZEludDgoKTtcblx0XHRcdFx0XHRcdHJldHVybiBldmVudDtcblx0XHRcdFx0XHRjYXNlIDB4MmY6XG5cdFx0XHRcdFx0XHRldmVudC5zdWJ0eXBlID0gJ2VuZE9mVHJhY2snO1xuXHRcdFx0XHRcdFx0aWYgKGxlbmd0aCAhPSAwKSB0aHJvdyBcIkV4cGVjdGVkIGxlbmd0aCBmb3IgZW5kT2ZUcmFjayBldmVudCBpcyAwLCBnb3QgXCIgKyBsZW5ndGg7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0XHRcdFx0Y2FzZSAweDUxOlxuXHRcdFx0XHRcdFx0ZXZlbnQuc3VidHlwZSA9ICdzZXRUZW1wbyc7XG5cdFx0XHRcdFx0XHRpZiAobGVuZ3RoICE9IDMpIHRocm93IFwiRXhwZWN0ZWQgbGVuZ3RoIGZvciBzZXRUZW1wbyBldmVudCBpcyAzLCBnb3QgXCIgKyBsZW5ndGg7XG5cdFx0XHRcdFx0XHRldmVudC5taWNyb3NlY29uZHNQZXJCZWF0ID0gKFxuXHRcdFx0XHRcdFx0XHQoc3RyZWFtLnJlYWRJbnQ4KCkgPDwgMTYpXG5cdFx0XHRcdFx0XHRcdCsgKHN0cmVhbS5yZWFkSW50OCgpIDw8IDgpXG5cdFx0XHRcdFx0XHRcdCsgc3RyZWFtLnJlYWRJbnQ4KClcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdHJldHVybiBldmVudDtcblx0XHRcdFx0XHRjYXNlIDB4NTQ6XG5cdFx0XHRcdFx0XHRldmVudC5zdWJ0eXBlID0gJ3NtcHRlT2Zmc2V0Jztcblx0XHRcdFx0XHRcdGlmIChsZW5ndGggIT0gNSkgdGhyb3cgXCJFeHBlY3RlZCBsZW5ndGggZm9yIHNtcHRlT2Zmc2V0IGV2ZW50IGlzIDUsIGdvdCBcIiArIGxlbmd0aDtcblx0XHRcdFx0XHRcdHZhciBob3VyQnl0ZSA9IHN0cmVhbS5yZWFkSW50OCgpO1xuXHRcdFx0XHRcdFx0ZXZlbnQuZnJhbWVSYXRlID0ge1xuXHRcdFx0XHRcdFx0XHQweDAwOiAyNCwgMHgyMDogMjUsIDB4NDA6IDI5LCAweDYwOiAzMFxuXHRcdFx0XHRcdFx0fVtob3VyQnl0ZSAmIDB4NjBdO1xuXHRcdFx0XHRcdFx0ZXZlbnQuaG91ciA9IGhvdXJCeXRlICYgMHgxZjtcblx0XHRcdFx0XHRcdGV2ZW50Lm1pbiA9IHN0cmVhbS5yZWFkSW50OCgpO1xuXHRcdFx0XHRcdFx0ZXZlbnQuc2VjID0gc3RyZWFtLnJlYWRJbnQ4KCk7XG5cdFx0XHRcdFx0XHRldmVudC5mcmFtZSA9IHN0cmVhbS5yZWFkSW50OCgpO1xuXHRcdFx0XHRcdFx0ZXZlbnQuc3ViZnJhbWUgPSBzdHJlYW0ucmVhZEludDgoKTtcblx0XHRcdFx0XHRcdHJldHVybiBldmVudDtcblx0XHRcdFx0XHRjYXNlIDB4NTg6XG5cdFx0XHRcdFx0XHRldmVudC5zdWJ0eXBlID0gJ3RpbWVTaWduYXR1cmUnO1xuXHRcdFx0XHRcdFx0aWYgKGxlbmd0aCAhPSA0KSB0aHJvdyBcIkV4cGVjdGVkIGxlbmd0aCBmb3IgdGltZVNpZ25hdHVyZSBldmVudCBpcyA0LCBnb3QgXCIgKyBsZW5ndGg7XG5cdFx0XHRcdFx0XHRldmVudC5udW1lcmF0b3IgPSBzdHJlYW0ucmVhZEludDgoKTtcblx0XHRcdFx0XHRcdGV2ZW50LmRlbm9taW5hdG9yID0gTWF0aC5wb3coMiwgc3RyZWFtLnJlYWRJbnQ4KCkpO1xuXHRcdFx0XHRcdFx0ZXZlbnQubWV0cm9ub21lID0gc3RyZWFtLnJlYWRJbnQ4KCk7XG5cdFx0XHRcdFx0XHRldmVudC50aGlydHlzZWNvbmRzID0gc3RyZWFtLnJlYWRJbnQ4KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0XHRcdFx0Y2FzZSAweDU5OlxuXHRcdFx0XHRcdFx0ZXZlbnQuc3VidHlwZSA9ICdrZXlTaWduYXR1cmUnO1xuXHRcdFx0XHRcdFx0aWYgKGxlbmd0aCAhPSAyKSB0aHJvdyBcIkV4cGVjdGVkIGxlbmd0aCBmb3Iga2V5U2lnbmF0dXJlIGV2ZW50IGlzIDIsIGdvdCBcIiArIGxlbmd0aDtcblx0XHRcdFx0XHRcdGV2ZW50LmtleSA9IHN0cmVhbS5yZWFkSW50OCh0cnVlKTtcblx0XHRcdFx0XHRcdGV2ZW50LnNjYWxlID0gc3RyZWFtLnJlYWRJbnQ4KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0XHRcdFx0Y2FzZSAweDdmOlxuXHRcdFx0XHRcdFx0ZXZlbnQuc3VidHlwZSA9ICdzZXF1ZW5jZXJTcGVjaWZpYyc7XG5cdFx0XHRcdFx0XHRldmVudC5kYXRhID0gc3RyZWFtLnJlYWQobGVuZ3RoKTtcblx0XHRcdFx0XHRcdHJldHVybiBldmVudDtcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJVbnJlY29nbmlzZWQgbWV0YSBldmVudCBzdWJ0eXBlOiBcIiArIHN1YnR5cGVCeXRlKTtcblx0XHRcdFx0XHRcdGV2ZW50LnN1YnR5cGUgPSAndW5rbm93bidcblx0XHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBzdHJlYW0ucmVhZChsZW5ndGgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGV2ZW50LmRhdGEgPSBzdHJlYW0ucmVhZChsZW5ndGgpO1xuXHRcdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0XHR9IGVsc2UgaWYgKGV2ZW50VHlwZUJ5dGUgPT0gMHhmMCkge1xuXHRcdFx0XHRldmVudC50eXBlID0gJ3N5c0V4Jztcblx0XHRcdFx0dmFyIGxlbmd0aCA9IHN0cmVhbS5yZWFkVmFySW50KCk7XG5cdFx0XHRcdGV2ZW50LmRhdGEgPSBzdHJlYW0ucmVhZChsZW5ndGgpO1xuXHRcdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0XHR9IGVsc2UgaWYgKGV2ZW50VHlwZUJ5dGUgPT0gMHhmNykge1xuXHRcdFx0XHRldmVudC50eXBlID0gJ2RpdmlkZWRTeXNFeCc7XG5cdFx0XHRcdHZhciBsZW5ndGggPSBzdHJlYW0ucmVhZFZhckludCgpO1xuXHRcdFx0XHRldmVudC5kYXRhID0gc3RyZWFtLnJlYWQobGVuZ3RoKTtcblx0XHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgXCJVbnJlY29nbmlzZWQgTUlESSBldmVudCB0eXBlIGJ5dGU6IFwiICsgZXZlbnRUeXBlQnl0ZTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0LyogY2hhbm5lbCBldmVudCAqL1xuXHRcdFx0dmFyIHBhcmFtMTtcblx0XHRcdGlmICgoZXZlbnRUeXBlQnl0ZSAmIDB4ODApID09IDApIHtcblx0XHRcdFx0LyogcnVubmluZyBzdGF0dXMgLSByZXVzZSBsYXN0RXZlbnRUeXBlQnl0ZSBhcyB0aGUgZXZlbnQgdHlwZS5cblx0XHRcdFx0XHRldmVudFR5cGVCeXRlIGlzIGFjdHVhbGx5IHRoZSBmaXJzdCBwYXJhbWV0ZXJcblx0XHRcdFx0Ki9cblx0XHRcdFx0cGFyYW0xID0gZXZlbnRUeXBlQnl0ZTtcblx0XHRcdFx0ZXZlbnRUeXBlQnl0ZSA9IGxhc3RFdmVudFR5cGVCeXRlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cGFyYW0xID0gc3RyZWFtLnJlYWRJbnQ4KCk7XG5cdFx0XHRcdGxhc3RFdmVudFR5cGVCeXRlID0gZXZlbnRUeXBlQnl0ZTtcblx0XHRcdH1cblx0XHRcdHZhciBldmVudFR5cGUgPSBldmVudFR5cGVCeXRlID4+IDQ7XG5cdFx0XHRldmVudC5jaGFubmVsID0gZXZlbnRUeXBlQnl0ZSAmIDB4MGY7XG5cdFx0XHRldmVudC50eXBlID0gJ2NoYW5uZWwnO1xuXHRcdFx0c3dpdGNoIChldmVudFR5cGUpIHtcblx0XHRcdFx0Y2FzZSAweDA4OlxuXHRcdFx0XHRcdGV2ZW50LnN1YnR5cGUgPSAnbm90ZU9mZic7XG5cdFx0XHRcdFx0ZXZlbnQubm90ZU51bWJlciA9IHBhcmFtMTtcblx0XHRcdFx0XHRldmVudC52ZWxvY2l0eSA9IHN0cmVhbS5yZWFkSW50OCgpO1xuXHRcdFx0XHRcdHJldHVybiBldmVudDtcblx0XHRcdFx0Y2FzZSAweDA5OlxuXHRcdFx0XHRcdGV2ZW50Lm5vdGVOdW1iZXIgPSBwYXJhbTE7XG5cdFx0XHRcdFx0ZXZlbnQudmVsb2NpdHkgPSBzdHJlYW0ucmVhZEludDgoKTtcblx0XHRcdFx0XHRpZiAoZXZlbnQudmVsb2NpdHkgPT0gMCkge1xuXHRcdFx0XHRcdFx0ZXZlbnQuc3VidHlwZSA9ICdub3RlT2ZmJztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZXZlbnQuc3VidHlwZSA9ICdub3RlT24nO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0XHRcdGNhc2UgMHgwYTpcblx0XHRcdFx0XHRldmVudC5zdWJ0eXBlID0gJ25vdGVBZnRlcnRvdWNoJztcblx0XHRcdFx0XHRldmVudC5ub3RlTnVtYmVyID0gcGFyYW0xO1xuXHRcdFx0XHRcdGV2ZW50LmFtb3VudCA9IHN0cmVhbS5yZWFkSW50OCgpO1xuXHRcdFx0XHRcdHJldHVybiBldmVudDtcblx0XHRcdFx0Y2FzZSAweDBiOlxuXHRcdFx0XHRcdGV2ZW50LnN1YnR5cGUgPSAnY29udHJvbGxlcic7XG5cdFx0XHRcdFx0ZXZlbnQuY29udHJvbGxlclR5cGUgPSBwYXJhbTE7XG5cdFx0XHRcdFx0ZXZlbnQudmFsdWUgPSBzdHJlYW0ucmVhZEludDgoKTtcblx0XHRcdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0XHRcdGNhc2UgMHgwYzpcblx0XHRcdFx0XHRldmVudC5zdWJ0eXBlID0gJ3Byb2dyYW1DaGFuZ2UnO1xuXHRcdFx0XHRcdGV2ZW50LnByb2dyYW1OdW1iZXIgPSBwYXJhbTE7XG5cdFx0XHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdFx0XHRjYXNlIDB4MGQ6XG5cdFx0XHRcdFx0ZXZlbnQuc3VidHlwZSA9ICdjaGFubmVsQWZ0ZXJ0b3VjaCc7XG5cdFx0XHRcdFx0ZXZlbnQuYW1vdW50ID0gcGFyYW0xO1xuXHRcdFx0XHRcdHJldHVybiBldmVudDtcblx0XHRcdFx0Y2FzZSAweDBlOlxuXHRcdFx0XHRcdGV2ZW50LnN1YnR5cGUgPSAncGl0Y2hCZW5kJztcblx0XHRcdFx0XHRldmVudC52YWx1ZSA9IHBhcmFtMSArIChzdHJlYW0ucmVhZEludDgoKSA8PCA3KTtcblx0XHRcdFx0XHRyZXR1cm4gZXZlbnQ7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgXCJVbnJlY29nbmlzZWQgTUlESSBldmVudCB0eXBlOiBcIiArIGV2ZW50VHlwZVxuXHRcdFx0XHRcdC8qIFxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiVW5yZWNvZ25pc2VkIE1JREkgZXZlbnQgdHlwZTogXCIgKyBldmVudFR5cGUpO1xuXHRcdFx0XHRcdHN0cmVhbS5yZWFkSW50OCgpO1xuXHRcdFx0XHRcdGV2ZW50LnN1YnR5cGUgPSAndW5rbm93bic7XG5cdFx0XHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdFx0XHRcdCovXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRzdHJlYW0gPSBTdHJlYW0oZGF0YSk7XG5cdHZhciBoZWFkZXJDaHVuayA9IHJlYWRDaHVuayhzdHJlYW0pO1xuXHRpZiAoaGVhZGVyQ2h1bmsuaWQgIT0gJ01UaGQnIHx8IGhlYWRlckNodW5rLmxlbmd0aCAhPSA2KSB7XG5cdFx0dGhyb3cgXCJCYWQgLm1pZCBmaWxlIC0gaGVhZGVyIG5vdCBmb3VuZFwiO1xuXHR9XG5cdHZhciBoZWFkZXJTdHJlYW0gPSBTdHJlYW0oaGVhZGVyQ2h1bmsuZGF0YSk7XG5cdHZhciBmb3JtYXRUeXBlID0gaGVhZGVyU3RyZWFtLnJlYWRJbnQxNigpO1xuXHR2YXIgdHJhY2tDb3VudCA9IGhlYWRlclN0cmVhbS5yZWFkSW50MTYoKTtcblx0dmFyIHRpbWVEaXZpc2lvbiA9IGhlYWRlclN0cmVhbS5yZWFkSW50MTYoKTtcblx0XG5cdGlmICh0aW1lRGl2aXNpb24gJiAweDgwMDApIHtcblx0XHR0aHJvdyBcIkV4cHJlc3NpbmcgdGltZSBkaXZpc2lvbiBpbiBTTVRQRSBmcmFtZXMgaXMgbm90IHN1cHBvcnRlZCB5ZXRcIlxuXHR9IGVsc2Uge1xuXHRcdHRpY2tzUGVyQmVhdCA9IHRpbWVEaXZpc2lvbjtcblx0fVxuXHRcblx0dmFyIGhlYWRlciA9IHtcblx0XHQnZm9ybWF0VHlwZSc6IGZvcm1hdFR5cGUsXG5cdFx0J3RyYWNrQ291bnQnOiB0cmFja0NvdW50LFxuXHRcdCd0aWNrc1BlckJlYXQnOiB0aWNrc1BlckJlYXRcblx0fVxuXHR2YXIgdHJhY2tzID0gW107XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZGVyLnRyYWNrQ291bnQ7IGkrKykge1xuXHRcdHRyYWNrc1tpXSA9IFtdO1xuXHRcdHZhciB0cmFja0NodW5rID0gcmVhZENodW5rKHN0cmVhbSk7XG5cdFx0aWYgKHRyYWNrQ2h1bmsuaWQgIT0gJ01UcmsnKSB7XG5cdFx0XHR0aHJvdyBcIlVuZXhwZWN0ZWQgY2h1bmsgLSBleHBlY3RlZCBNVHJrLCBnb3QgXCIrIHRyYWNrQ2h1bmsuaWQ7XG5cdFx0fVxuXHRcdHZhciB0cmFja1N0cmVhbSA9IFN0cmVhbSh0cmFja0NodW5rLmRhdGEpO1xuXHRcdHdoaWxlICghdHJhY2tTdHJlYW0uZW9mKCkpIHtcblx0XHRcdHZhciBldmVudCA9IHJlYWRFdmVudCh0cmFja1N0cmVhbSk7XG5cdFx0XHR0cmFja3NbaV0ucHVzaChldmVudCk7XG5cdFx0XHQvL2NvbnNvbGUubG9nKGV2ZW50KTtcblx0XHR9XG5cdH1cblx0XG5cdHJldHVybiB7XG5cdFx0J2hlYWRlcic6IGhlYWRlcixcblx0XHQndHJhY2tzJzogdHJhY2tzXG5cdH1cbn07XG5cbi8qIFdyYXBwZXIgZm9yIGFjY2Vzc2luZyBzdHJpbmdzIHRocm91Z2ggc2VxdWVudGlhbCByZWFkcyAqL1xuZnVuY3Rpb24gU3RyZWFtKHN0cikge1xuXHR2YXIgcG9zaXRpb24gPSAwO1xuXHRcblx0ZnVuY3Rpb24gcmVhZChsZW5ndGgpIHtcblx0XHR2YXIgcmVzdWx0ID0gc3RyLnN1YnN0cihwb3NpdGlvbiwgbGVuZ3RoKTtcblx0XHRwb3NpdGlvbiArPSBsZW5ndGg7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXHRcblx0LyogcmVhZCBhIGJpZy1lbmRpYW4gMzItYml0IGludGVnZXIgKi9cblx0ZnVuY3Rpb24gcmVhZEludDMyKCkge1xuXHRcdHZhciByZXN1bHQgPSAoXG5cdFx0XHQoc3RyLmNoYXJDb2RlQXQocG9zaXRpb24pIDw8IDI0KVxuXHRcdFx0KyAoc3RyLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSA8PCAxNilcblx0XHRcdCsgKHN0ci5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMikgPDwgOClcblx0XHRcdCsgc3RyLmNoYXJDb2RlQXQocG9zaXRpb24gKyAzKSk7XG5cdFx0cG9zaXRpb24gKz0gNDtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0LyogcmVhZCBhIGJpZy1lbmRpYW4gMTYtYml0IGludGVnZXIgKi9cblx0ZnVuY3Rpb24gcmVhZEludDE2KCkge1xuXHRcdHZhciByZXN1bHQgPSAoXG5cdFx0XHQoc3RyLmNoYXJDb2RlQXQocG9zaXRpb24pIDw8IDgpXG5cdFx0XHQrIHN0ci5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpO1xuXHRcdHBvc2l0aW9uICs9IDI7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXHRcblx0LyogcmVhZCBhbiA4LWJpdCBpbnRlZ2VyICovXG5cdGZ1bmN0aW9uIHJlYWRJbnQ4KHNpZ25lZCkge1xuXHRcdHZhciByZXN1bHQgPSBzdHIuY2hhckNvZGVBdChwb3NpdGlvbik7XG5cdFx0aWYgKHNpZ25lZCAmJiByZXN1bHQgPiAxMjcpIHJlc3VsdCAtPSAyNTY7XG5cdFx0cG9zaXRpb24gKz0gMTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBlb2YoKSB7XG5cdFx0cmV0dXJuIHBvc2l0aW9uID49IHN0ci5sZW5ndGg7XG5cdH1cblx0XG5cdC8qIHJlYWQgYSBNSURJLXN0eWxlIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyXG5cdFx0KGJpZy1lbmRpYW4gdmFsdWUgaW4gZ3JvdXBzIG9mIDcgYml0cyxcblx0XHR3aXRoIHRvcCBiaXQgc2V0IHRvIHNpZ25pZnkgdGhhdCBhbm90aGVyIGJ5dGUgZm9sbG93cylcblx0Ki9cblx0ZnVuY3Rpb24gcmVhZFZhckludCgpIHtcblx0XHR2YXIgcmVzdWx0ID0gMDtcblx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0dmFyIGIgPSByZWFkSW50OCgpO1xuXHRcdFx0aWYgKGIgJiAweDgwKSB7XG5cdFx0XHRcdHJlc3VsdCArPSAoYiAmIDB4N2YpO1xuXHRcdFx0XHRyZXN1bHQgPDw9IDc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvKiBiIGlzIHRoZSBsYXN0IGJ5dGUgKi9cblx0XHRcdFx0cmV0dXJuIHJlc3VsdCArIGI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRyZXR1cm4ge1xuXHRcdCdlb2YnOiBlb2YsXG5cdFx0J3JlYWQnOiByZWFkLFxuXHRcdCdyZWFkSW50MzInOiByZWFkSW50MzIsXG5cdFx0J3JlYWRJbnQxNic6IHJlYWRJbnQxNixcblx0XHQncmVhZEludDgnOiByZWFkSW50OCxcblx0XHQncmVhZFZhckludCc6IHJlYWRWYXJJbnRcblx0fVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9taWRpLWZpbGUtcGFyc2VyL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(module) {var Midi = {};\n\n(function(exported) {\n\n\tvar DEFAULT_VOLUME   = exported.DEFAULT_VOLUME   = 90;\n\tvar DEFAULT_DURATION = exported.DEFAULT_DURATION = 128;\n\tvar DEFAULT_CHANNEL  = exported.DEFAULT_CHANNEL  = 0;\n\n\t/* ******************************************************************\n\t * Utility functions\n\t ****************************************************************** */\n\n\tvar Util = {\n\n\t\tmidi_letter_pitches: { a:21, b:23, c:12, d:14, e:16, f:17, g:19 },\n\n\t\t/**\n\t\t * Convert a symbolic note name (e.g. \"c4\") to a numeric MIDI pitch (e.g.\n\t\t * 60, middle C).\n\t\t *\n\t\t * @param {string} n - The symbolic note name to parse.\n\t\t * @returns {number} The MIDI pitch that corresponds to the symbolic note\n\t\t * name.\n\t\t */\n\t\tmidiPitchFromNote: function(n) {\n\t\t\tvar matches = /([a-g])(#+|b+)?([0-9]+)$/i.exec(n);\n\t\t\tvar note = matches[1].toLowerCase(), accidental = matches[2] || '', octave = parseInt(matches[3], 10);\n\t\t\treturn (12 * octave) + Util.midi_letter_pitches[note] + (accidental.substr(0,1)=='#'?1:-1) * accidental.length;\n\t\t},\n\n\t\t/**\n\t\t * Ensure that the given argument is converted to a MIDI pitch. Note that\n\t\t * it may already be one (including a purely numeric string).\n\t\t *\n\t\t * @param {string|number} p - The pitch to convert.\n\t\t * @returns {number} The resulting numeric MIDI pitch.\n\t\t */\n\t\tensureMidiPitch: function(p) {\n\t\t\tif (typeof p == 'number' || !/[^0-9]/.test(p)) {\n\t\t\t\t// numeric pitch\n\t\t\t\treturn parseInt(p, 10);\n\t\t\t} else {\n\t\t\t\t// assume it's a note name\n\t\t\t\treturn Util.midiPitchFromNote(p);\n\t\t\t}\n\t\t},\n\n\t\tmidi_pitches_letter: { '12':'c', '13':'c#', '14':'d', '15':'d#', '16':'e', '17':'f', '18':'f#', '19':'g', '20':'g#', '21':'a', '22':'a#', '23':'b' },\n\t\tmidi_flattened_notes: { 'a#':'bb', 'c#':'db', 'd#':'eb', 'f#':'gb', 'g#':'ab' },\n\n\t\t/**\n\t\t * Convert a numeric MIDI pitch value (e.g. 60) to a symbolic note name\n\t\t * (e.g. \"c4\").\n\t\t *\n\t\t * @param {number} n - The numeric MIDI pitch value to convert.\n\t\t * @param {boolean} [returnFlattened=false] - Whether to prefer flattened\n\t\t * notes to sharpened ones. Optional, default false.\n\t\t * @returns {string} The resulting symbolic note name.\n\t\t */\n\t\tnoteFromMidiPitch: function(n, returnFlattened) {\n\t\t\tvar octave = 0, noteNum = n, noteName, returnFlattened = returnFlattened || false;\n\t\t\tif (n > 23) {\n\t\t\t\t// noteNum is on octave 1 or more\n\t\t\t\toctave = Math.floor(n/12) - 1;\n\t\t\t\t// subtract number of octaves from noteNum\n\t\t\t\tnoteNum = n - octave * 12;\n\t\t\t}\n\n\t\t\t// get note name (c#, d, f# etc)\n\t\t\tnoteName = Util.midi_pitches_letter[noteNum];\n\t\t\t// Use flattened notes if requested (e.g. f# should be output as gb)\n\t\t\tif (returnFlattened && noteName.indexOf('#') > 0) {\n\t\t\t\tnoteName = Util.midi_flattened_notes[noteName];\n\t\t\t}\n\t\t\treturn noteName + octave;\n\t\t},\n\n\t\t/**\n\t\t * Convert beats per minute (BPM) to microseconds per quarter note (MPQN).\n\t\t *\n\t\t * @param {number} bpm - A number in beats per minute.\n\t\t * @returns {number} The number of microseconds per quarter note.\n\t\t */\n\t\tmpqnFromBpm: function(bpm) {\n\t\t\tvar mpqn = Math.floor(60000000 / bpm);\n\t\t\tvar ret=[];\n\t\t\tdo {\n\t\t\t\tret.unshift(mpqn & 0xFF);\n\t\t\t\tmpqn >>= 8;\n\t\t\t} while (mpqn);\n\t\t\twhile (ret.length < 3) {\n\t\t\t\tret.push(0);\n\t\t\t}\n\t\t\treturn ret;\n\t\t},\n\n\t\t/**\n\t\t * Convert microseconds per quarter note (MPQN) to beats per minute (BPM).\n\t\t *\n\t\t * @param {number} mpqn - The number of microseconds per quarter note.\n\t\t * @returns {number} A number in beats per minute.\n\t\t */\n\t\tbpmFromMpqn: function(mpqn) {\n\t\t\tvar m = mpqn;\n\t\t\tif (typeof mpqn[0] != 'undefined') {\n\t\t\t\tm = 0;\n\t\t\t\tfor (var i=0, l=mpqn.length-1; l >= 0; ++i, --l) {\n\t\t\t\t\tm |= mpqn[i] << l;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Math.floor(60000000 / mpqn);\n\t\t},\n\n\t\t/**\n\t\t * Converts an array of bytes to a string of hexadecimal characters. Prepares\n\t\t * it to be converted into a base64 string.\n\t\t *\n\t\t * @param {Array} byteArray - Array of bytes to be converted.\n\t\t * @returns {string} Hexadecimal string, e.g. \"097B8A\".\n\t\t */\n\t\tcodes2Str: function(byteArray) {\n\t\t\treturn String.fromCharCode.apply(null, byteArray);\n\t\t},\n\n\t\t/**\n\t\t * Converts a string of hexadecimal values to an array of bytes. It can also\n\t\t * add remaining \"0\" nibbles in order to have enough bytes in the array as the\n\t\t * `finalBytes` parameter.\n\t\t *\n\t\t * @param {string} str - string of hexadecimal values e.g. \"097B8A\"\n\t\t * @param {number} [finalBytes] - Optional. The desired number of bytes\n\t\t * (not nibbles) that the returned array should contain.\n\t\t * @returns {Array} An array of nibbles.\n\t\t */\n\t\tstr2Bytes: function (str, finalBytes) {\n\t\t\tif (finalBytes) {\n\t\t\t\twhile ((str.length / 2) < finalBytes) { str = \"0\" + str; }\n\t\t\t}\n\n\t\t\tvar bytes = [];\n\t\t\tfor (var i=str.length-1; i>=0; i = i-2) {\n\t\t\t\tvar chars = i === 0 ? str[i] : str[i-1] + str[i];\n\t\t\t\tbytes.unshift(parseInt(chars, 16));\n\t\t\t}\n\n\t\t\treturn bytes;\n\t\t},\n\n\t\t/**\n\t\t * Translates number of ticks to MIDI timestamp format, returning an array\n\t\t * of bytes with the time values. MIDI has a very particular way to express\n\t\t * time; take a good look at the spec before ever touching this function.\n\t\t *\n\t\t * @param {number} ticks - Number of ticks to be translated.\n\t\t * @returns {number} Array of bytes that form the MIDI time value.\n\t\t */\n\t\ttranslateTickTime: function(ticks) {\n\t\t\tvar buffer = ticks & 0x7F;\n\n\t\t\twhile (ticks = ticks >> 7) {\n\t\t\t\tbuffer <<= 8;\n\t\t\t\tbuffer |= ((ticks & 0x7F) | 0x80);\n\t\t\t}\n\n\t\t\tvar bList = [];\n\t\t\twhile (true) {\n\t\t\t\tbList.push(buffer & 0xff);\n\n\t\t\t\tif (buffer & 0x80) { buffer >>= 8; }\n\t\t\t\telse { break; }\n\t\t\t}\n\t\t\treturn bList;\n\t\t},\n\n\t};\n\n\t/* ******************************************************************\n\t * Event class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a MIDI event.\n\t *\n\t * Parameters include:\n\t *  - time [optional number] - Ticks since previous event.\n\t *  - type [required number] - Type of event.\n\t *  - channel [required number] - Channel for the event.\n\t *  - param1 [required number] - First event parameter.\n\t *  - param2 [optional number] - Second event parameter.\n\t */\n\tvar MidiEvent = function(params) {\n\t\tif (!this) return new MidiEvent(params);\n\t\tif (params &&\n\t\t\t\t(params.type    !== null || params.type    !== undefined) &&\n\t\t\t\t(params.channel !== null || params.channel !== undefined) &&\n\t\t\t\t(params.param1  !== null || params.param1  !== undefined)) {\n\t\t\tthis.setTime(params.time);\n\t\t\tthis.setType(params.type);\n\t\t\tthis.setChannel(params.channel);\n\t\t\tthis.setParam1(params.param1);\n\t\t\tthis.setParam2(params.param2);\n\t\t}\n\t};\n\n\t// event codes\n\tMidiEvent.NOTE_OFF           = 0x80;\n\tMidiEvent.NOTE_ON            = 0x90;\n\tMidiEvent.AFTER_TOUCH        = 0xA0;\n\tMidiEvent.CONTROLLER         = 0xB0;\n\tMidiEvent.PROGRAM_CHANGE     = 0xC0;\n\tMidiEvent.CHANNEL_AFTERTOUCH = 0xD0;\n\tMidiEvent.PITCH_BEND         = 0xE0;\n\n\n\t/**\n\t * Set the time for the event in ticks since the previous event.\n\t *\n\t * @param {number} ticks - The number of ticks since the previous event. May\n\t * be zero.\n\t */\n\tMidiEvent.prototype.setTime = function(ticks) {\n\t\tthis.time = Util.translateTickTime(ticks || 0);\n\t};\n\n\t/**\n\t * Set the type of the event. Must be one of the event codes on MidiEvent.\n\t *\n\t * @param {number} type - Event type.\n\t */\n\tMidiEvent.prototype.setType = function(type) {\n\t\tif (type < MidiEvent.NOTE_OFF || type > MidiEvent.PITCH_BEND) {\n\t\t\tthrow new Error(\"Trying to set an unknown event: \" + type);\n\t\t}\n\n\t\tthis.type = type;\n\t};\n\n\t/**\n\t * Set the channel for the event. Must be between 0 and 15, inclusive.\n\t *\n\t * @param {number} channel - The event channel.\n\t */\n\tMidiEvent.prototype.setChannel = function(channel) {\n\t\tif (channel < 0 || channel > 15) {\n\t\t\tthrow new Error(\"Channel is out of bounds.\");\n\t\t}\n\n\t\tthis.channel = channel;\n\t};\n\n\t/**\n\t * Set the first parameter for the event. Must be between 0 and 255,\n\t * inclusive.\n\t *\n\t * @param {number} p - The first event parameter value.\n\t */\n\tMidiEvent.prototype.setParam1 = function(p) {\n\t\tthis.param1 = p;\n\t};\n\n\t/**\n\t * Set the second parameter for the event. Must be between 0 and 255,\n\t * inclusive.\n\t *\n\t * @param {number} p - The second event parameter value.\n\t */\n\tMidiEvent.prototype.setParam2 = function(p) {\n\t\tthis.param2 = p;\n\t};\n\n\t/**\n\t * Serialize the event to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tMidiEvent.prototype.toBytes = function() {\n\t\tvar byteArray = [];\n\n\t\tvar typeChannelByte = this.type | (this.channel & 0xF);\n\n\t\tbyteArray.push.apply(byteArray, this.time);\n\t\tbyteArray.push(typeChannelByte);\n\t\tbyteArray.push(this.param1);\n\n\t\t// Some events don't have a second parameter\n\t\tif (this.param2 !== undefined && this.param2 !== null) {\n\t\t\tbyteArray.push(this.param2);\n\t\t}\n\t\treturn byteArray;\n\t};\n\n\t/* ******************************************************************\n\t * MetaEvent class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a meta event.\n\t *\n\t * Parameters include:\n\t *  - time [optional number] - Ticks since previous event.\n\t *  - type [required number] - Type of event.\n\t *  - data [optional array|string] - Event data.\n\t */\n\tvar MetaEvent = function(params) {\n\t\tif (!this) return new MetaEvent(params);\n\t\tvar p = params || {};\n\t\tthis.setTime(params.time);\n\t\tthis.setType(params.type);\n\t\tthis.setData(params.data);\n\t};\n\n\tMetaEvent.SEQUENCE   = 0x00;\n\tMetaEvent.TEXT       = 0x01;\n\tMetaEvent.COPYRIGHT  = 0x02;\n\tMetaEvent.TRACK_NAME = 0x03;\n\tMetaEvent.INSTRUMENT = 0x04;\n\tMetaEvent.LYRIC      = 0x05;\n\tMetaEvent.MARKER     = 0x06;\n\tMetaEvent.CUE_POINT  = 0x07;\n\tMetaEvent.CHANNEL_PREFIX = 0x20;\n\tMetaEvent.END_OF_TRACK   = 0x2f;\n\tMetaEvent.TEMPO      = 0x51;\n\tMetaEvent.SMPTE      = 0x54;\n\tMetaEvent.TIME_SIG   = 0x58;\n\tMetaEvent.KEY_SIG    = 0x59;\n\tMetaEvent.SEQ_EVENT  = 0x7f;\n\n\t/**\n\t * Set the time for the event in ticks since the previous event.\n\t *\n\t * @param {number} ticks - The number of ticks since the previous event. May\n\t * be zero.\n\t */\n\tMetaEvent.prototype.setTime = function(ticks) {\n\t\tthis.time = Util.translateTickTime(ticks || 0);\n\t};\n\n\t/**\n\t * Set the type of the event. Must be one of the event codes on MetaEvent.\n\t *\n\t * @param {number} t - Event type.\n\t */\n\tMetaEvent.prototype.setType = function(t) {\n\t\tthis.type = t;\n\t};\n\n\t/**\n\t * Set the data associated with the event. May be a string or array of byte\n\t * values.\n\t *\n\t * @param {string|Array} d - Event data.\n\t */\n\tMetaEvent.prototype.setData = function(d) {\n\t\tthis.data = d;\n\t};\n\n\t/**\n\t * Serialize the event to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tMetaEvent.prototype.toBytes = function() {\n\t\tif (!this.type) {\n\t\t\tthrow new Error(\"Type for meta-event not specified.\");\n\t\t}\n\n\t\tvar byteArray = [];\n\t\tbyteArray.push.apply(byteArray, this.time);\n\t\tbyteArray.push(0xFF, this.type);\n\n\t\t// If data is an array, we assume that it contains several bytes. We\n\t\t// apend them to byteArray.\n\t\tif (Array.isArray(this.data)) {\n\t\t\tbyteArray.push(this.data.length);\n\t\t\tbyteArray.push.apply(byteArray, this.data);\n\t\t} else if (typeof this.data == 'number') {\n\t\t\tbyteArray.push(1, this.data);\n\t\t} else if (this.data !== null && this.data !== undefined) {\n\t\t\t// assume string; may be a bad assumption\n\t\t\tbyteArray.push(this.data.length);\n\t\t\tvar dataBytes = this.data.split('').map(function(x){ return x.charCodeAt(0) });\n\t\t\tbyteArray.push.apply(byteArray, dataBytes);\n\t\t} else {\n\t\t\tbyteArray.push(0);\n\t\t}\n\n\t\treturn byteArray;\n\t};\n\n\t/* ******************************************************************\n\t * Track class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a MIDI track.\n\t *\n\t * Parameters include:\n\t *  - events [optional array] - Array of events for the track.\n\t */\n\tvar Track = function(config) {\n\t\tif (!this) return new Track(config);\n\t\tvar c = config || {};\n\t\tthis.events = c.events || [];\n\t};\n\n\tTrack.START_BYTES = [0x4d, 0x54, 0x72, 0x6b];\n\tTrack.END_BYTES   = [0x00, 0xFF, 0x2F, 0x00];\n\n\t/**\n\t * Add an event to the track.\n\t *\n\t * @param {MidiEvent|MetaEvent} event - The event to add.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addEvent = function(event) {\n\t\tthis.events.push(event);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The volume for the note, defaults to\n\t * DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNoteOn = Track.prototype.noteOn = function(channel, pitch, time, velocity) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.NOTE_ON,\n\t\t\tchannel: channel,\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-off event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The velocity the note was released,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNoteOff = Track.prototype.noteOff = function(channel, pitch, time, velocity) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.NOTE_OFF,\n\t\t\tchannel: channel,\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on and -off event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} dur - The duration of the note, in ticks.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The velocity the note was released,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNote = Track.prototype.note = function(channel, pitch, dur, time, velocity) {\n\t\tthis.noteOn(channel, pitch, time, velocity);\n\t\tif (dur) {\n\t\t\tthis.noteOff(channel, pitch, dur, velocity);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on and -off event to the track for each pitch in an array of pitches.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {array} chord - An array of pitches, either numeric or\n\t * symbolic.\n\t * @param {number} dur - The duration of the chord, in ticks.\n\t * @param {number} [velocity=90] - The velocity of the chord,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addChord = Track.prototype.chord = function(channel, chord, dur, velocity) {\n\t\tif (!Array.isArray(chord) && !chord.length) {\n\t\t\tthrow new Error('Chord must be an array of pitches');\n\t\t}\n\t\tchord.forEach(function(note) {\n\t\t\tthis.noteOn(channel, note, 0, velocity);\n\t\t}, this);\n\t\tchord.forEach(function(note, index) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis.noteOff(channel, note, dur);\n\t\t\t} else {\n\t\t\t\tthis.noteOff(channel, note);\n\t\t\t}\n\t\t}, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Set instrument for the track.\n\t *\n\t * @param {number} channel - The channel to set the instrument on.\n\t * @param {number} instrument - The instrument to set it to.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.setInstrument = Track.prototype.instrument = function(channel, instrument, time) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.PROGRAM_CHANGE,\n\t\t\tchannel: channel,\n\t\t\tparam1: instrument,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Set the tempo for the track.\n\t *\n\t * @param {number} bpm - The new number of beats per minute.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.setTempo = Track.prototype.tempo = function(bpm, time) {\n\t\tthis.events.push(new MetaEvent({\n\t\t\ttype: MetaEvent.TEMPO,\n\t\t\tdata: Util.mpqnFromBpm(bpm),\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Serialize the track to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tTrack.prototype.toBytes = function() {\n\t\tvar trackLength = 0;\n\t\tvar eventBytes = [];\n\t\tvar startBytes = Track.START_BYTES;\n\t\tvar endBytes   = Track.END_BYTES;\n\n\t\tvar addEventBytes = function(event) {\n\t\t\tvar bytes = event.toBytes();\n\t\t\ttrackLength += bytes.length;\n\t\t\teventBytes.push.apply(eventBytes, bytes);\n\t\t};\n\n\t\tthis.events.forEach(addEventBytes);\n\n\t\t// Add the end-of-track bytes to the sum of bytes for the track, since\n\t\t// they are counted (unlike the start-of-track ones).\n\t\ttrackLength += endBytes.length;\n\n\t\t// Makes sure that track length will fill up 4 bytes with 0s in case\n\t\t// the length is less than that (the usual case).\n\t\tvar lengthBytes = Util.str2Bytes(trackLength.toString(16), 4);\n\n\t\treturn startBytes.concat(lengthBytes, eventBytes, endBytes);\n\t};\n\n\t/* ******************************************************************\n\t * File class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a file object.\n\t *\n\t * Parameters include:\n\t *  - ticks [optional number] - Number of ticks per beat, defaults to 128.\n\t *    Must be 1-32767.\n\t *  - tracks [optional array] - Track data.\n\t */\n\tvar File = function(config){\n\t\tif (!this) return new File(config);\n\n\t\tvar c = config || {};\n\t\tif (c.ticks) {\n\t\t\tif (typeof c.ticks !== 'number') {\n\t\t\t\tthrow new Error('Ticks per beat must be a number!');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (c.ticks <= 0 || c.ticks >= (1 << 15) || c.ticks % 1 !== 0) {\n\t\t\t\tthrow new Error('Ticks per beat must be an integer between 1 and 32767!');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.ticks = c.ticks || 128;\n\t\tthis.tracks = c.tracks || [];\n\t};\n\n\tFile.HDR_CHUNKID     = \"MThd\";             // File magic cookie\n\tFile.HDR_CHUNK_SIZE  = \"\\x00\\x00\\x00\\x06\"; // Header length for SMF\n\tFile.HDR_TYPE0       = \"\\x00\\x00\";         // Midi Type 0 id\n\tFile.HDR_TYPE1       = \"\\x00\\x01\";         // Midi Type 1 id\n\n\t/**\n\t * Add a track to the file.\n\t *\n\t * @param {Track} track - The track to add.\n\t */\n\tFile.prototype.addTrack = function(track) {\n\t\tif (track) {\n\t\t\tthis.tracks.push(track);\n\t\t\treturn this;\n\t\t} else {\n\t\t\ttrack = new Track();\n\t\t\tthis.tracks.push(track);\n\t\t\treturn track;\n\t\t}\n\t};\n\n\t/**\n\t * Serialize the MIDI file to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tFile.prototype.toBytes = function() {\n\t\tvar trackCount = this.tracks.length.toString(16);\n\n\t\t// prepare the file header\n\t\tvar bytes = File.HDR_CHUNKID + File.HDR_CHUNK_SIZE;\n\n\t\t// set Midi type based on number of tracks\n\t\tif (parseInt(trackCount, 16) > 1) {\n\t\t\tbytes += File.HDR_TYPE1;\n\t\t} else {\n\t\t\tbytes += File.HDR_TYPE0;\n\t\t}\n\n\t\t// add the number of tracks (2 bytes)\n\t\tbytes += Util.codes2Str(Util.str2Bytes(trackCount, 2));\n\t\t// add the number of ticks per beat (currently hardcoded)\n\t\tbytes += String.fromCharCode((this.ticks/256),  this.ticks%256);;\n\n\t\t// iterate over the tracks, converting to bytes too\n\t\tthis.tracks.forEach(function(track) {\n\t\t\tbytes += Util.codes2Str(track.toBytes());\n\t\t});\n\n\t\treturn bytes;\n\t};\n\n\t/* ******************************************************************\n\t * Exports\n\t ****************************************************************** */\n\n\texported.Util = Util;\n\texported.File = File;\n\texported.Track = Track;\n\texported.Event = MidiEvent;\n\texported.MetaEvent = MetaEvent;\n\n})( Midi );\n\nif (typeof module != 'undefined' && module !== null) {\n\tmodule.exports = Midi;\n} else if (typeof exports != 'undefined' && exports !== null) {\n\texports = Midi;\n} else {\n\tthis.Midi = Midi;\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn1cclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("'use strict';\n\nfunction cleanName(str) {\n\t//ableton adds some weird stuff to the track\n\treturn str.replace(/\\u0000/g, '');\n}\n\nfunction ticksToSeconds(ticks, header) {\n\treturn 60 / header.bpm * (ticks / header.PPQ);\n}\n\nfunction isNumber(val) {\n\treturn typeof val === 'number';\n}\n\nfunction isString(val) {\n\treturn typeof val === 'string';\n}\n\nvar isPitch = function () {\n\tvar regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i;\n\treturn function (val) {\n\t\treturn isString(val) && regexp.test(val);\n\t};\n}();\n\nfunction midiToPitch(midi) {\n\tvar scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\tvar octave = Math.floor(midi / 12) - 1;\n\tvar note = midi % 12;\n\treturn scaleIndexToNote[note] + octave;\n}\n\nvar pitchToMidi = function () {\n\tvar regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i;\n\tvar noteToScaleIndex = {\n\t\t\"cbb\": -2, \"cb\": -1, \"c\": 0, \"c#\": 1, \"cx\": 2,\n\t\t\"dbb\": 0, \"db\": 1, \"d\": 2, \"d#\": 3, \"dx\": 4,\n\t\t\"ebb\": 2, \"eb\": 3, \"e\": 4, \"e#\": 5, \"ex\": 6,\n\t\t\"fbb\": 3, \"fb\": 4, \"f\": 5, \"f#\": 6, \"fx\": 7,\n\t\t\"gbb\": 5, \"gb\": 6, \"g\": 7, \"g#\": 8, \"gx\": 9,\n\t\t\"abb\": 7, \"ab\": 8, \"a\": 9, \"a#\": 10, \"ax\": 11,\n\t\t\"bbb\": 9, \"bb\": 10, \"b\": 11, \"b#\": 12, \"bx\": 13\n\t};\n\treturn function (note) {\n\t\tvar split = regexp.exec(note);\n\t\tvar pitch = split[1];\n\t\tvar octave = split[2];\n\t\tvar index = noteToScaleIndex[pitch.toLowerCase()];\n\t\treturn index + (parseInt(octave) + 1) * 12;\n\t};\n}();\n\nmodule.exports = { cleanName: cleanName, ticksToSeconds: ticksToSeconds, isString: isString, isNumber: isNumber, isPitch: isPitch, midiToPitch: midiToPitch, pitchToMidi: pitchToMidi };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVXRpbC5qcz9iYmQ5Il0sIm5hbWVzIjpbImNsZWFuTmFtZSIsInN0ciIsInJlcGxhY2UiLCJ0aWNrc1RvU2Vjb25kcyIsInRpY2tzIiwiaGVhZGVyIiwiYnBtIiwiUFBRIiwiaXNOdW1iZXIiLCJ2YWwiLCJpc1N0cmluZyIsImlzUGl0Y2giLCJyZWdleHAiLCJ0ZXN0IiwibWlkaVRvUGl0Y2giLCJtaWRpIiwic2NhbGVJbmRleFRvTm90ZSIsIm9jdGF2ZSIsIk1hdGgiLCJmbG9vciIsIm5vdGUiLCJwaXRjaFRvTWlkaSIsIm5vdGVUb1NjYWxlSW5kZXgiLCJzcGxpdCIsImV4ZWMiLCJwaXRjaCIsImluZGV4IiwidG9Mb3dlckNhc2UiLCJwYXJzZUludCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBU0EsU0FBVCxDQUFtQkMsR0FBbkIsRUFBdUI7QUFDdEI7QUFDQSxRQUFPQSxJQUFJQyxPQUFKLENBQVksU0FBWixFQUF1QixFQUF2QixDQUFQO0FBQ0E7O0FBRUQsU0FBU0MsY0FBVCxDQUF3QkMsS0FBeEIsRUFBK0JDLE1BQS9CLEVBQXNDO0FBQ3JDLFFBQVEsS0FBS0EsT0FBT0MsR0FBYixJQUFxQkYsUUFBUUMsT0FBT0UsR0FBcEMsQ0FBUDtBQUNBOztBQUVELFNBQVNDLFFBQVQsQ0FBa0JDLEdBQWxCLEVBQXNCO0FBQ3JCLFFBQU8sT0FBT0EsR0FBUCxLQUFlLFFBQXRCO0FBQ0E7O0FBRUQsU0FBU0MsUUFBVCxDQUFrQkQsR0FBbEIsRUFBc0I7QUFDckIsUUFBTyxPQUFPQSxHQUFQLEtBQWUsUUFBdEI7QUFDQTs7QUFFRCxJQUFNRSxVQUFXLFlBQVU7QUFDMUIsS0FBTUMsU0FBUyxxQ0FBZjtBQUNBLFFBQU8sVUFBQ0gsR0FBRCxFQUFTO0FBQ2YsU0FBT0MsU0FBU0QsR0FBVCxLQUFpQkcsT0FBT0MsSUFBUCxDQUFZSixHQUFaLENBQXhCO0FBQ0EsRUFGRDtBQUdBLENBTGdCLEVBQWpCOztBQVFBLFNBQVNLLFdBQVQsQ0FBcUJDLElBQXJCLEVBQTBCO0FBQ3pCLEtBQU1DLG1CQUFtQixDQUFDLEdBQUQsRUFBTSxJQUFOLEVBQVksR0FBWixFQUFpQixJQUFqQixFQUF1QixHQUF2QixFQUE0QixHQUE1QixFQUFpQyxJQUFqQyxFQUF1QyxHQUF2QyxFQUE0QyxJQUE1QyxFQUFrRCxHQUFsRCxFQUF1RCxJQUF2RCxFQUE2RCxHQUE3RCxDQUF6QjtBQUNBLEtBQU1DLFNBQVNDLEtBQUtDLEtBQUwsQ0FBV0osT0FBTyxFQUFsQixJQUF3QixDQUF2QztBQUNBLEtBQU1LLE9BQU9MLE9BQU8sRUFBcEI7QUFDQSxRQUFPQyxpQkFBaUJJLElBQWpCLElBQXlCSCxNQUFoQztBQUNBOztBQUVELElBQU1JLGNBQWUsWUFBVTtBQUM5QixLQUFNVCxTQUFTLHFDQUFmO0FBQ0EsS0FBTVUsbUJBQW1CO0FBQ3hCLFNBQVEsQ0FBQyxDQURlLEVBQ1osTUFBTyxDQUFDLENBREksRUFDRCxLQUFNLENBREwsRUFDUyxNQUFPLENBRGhCLEVBQ29CLE1BQU8sQ0FEM0I7QUFFeEIsU0FBUSxDQUZnQixFQUVaLE1BQU8sQ0FGSyxFQUVELEtBQU0sQ0FGTCxFQUVTLE1BQU8sQ0FGaEIsRUFFb0IsTUFBTyxDQUYzQjtBQUd4QixTQUFRLENBSGdCLEVBR1osTUFBTyxDQUhLLEVBR0QsS0FBTSxDQUhMLEVBR1MsTUFBTyxDQUhoQixFQUdvQixNQUFPLENBSDNCO0FBSXhCLFNBQVEsQ0FKZ0IsRUFJWixNQUFPLENBSkssRUFJRCxLQUFNLENBSkwsRUFJUyxNQUFPLENBSmhCLEVBSW9CLE1BQU8sQ0FKM0I7QUFLeEIsU0FBUSxDQUxnQixFQUtaLE1BQU8sQ0FMSyxFQUtELEtBQU0sQ0FMTCxFQUtTLE1BQU8sQ0FMaEIsRUFLb0IsTUFBTyxDQUwzQjtBQU14QixTQUFRLENBTmdCLEVBTVosTUFBTyxDQU5LLEVBTUQsS0FBTSxDQU5MLEVBTVMsTUFBTyxFQU5oQixFQU1vQixNQUFPLEVBTjNCO0FBT3hCLFNBQVEsQ0FQZ0IsRUFPWixNQUFPLEVBUEssRUFPRCxLQUFNLEVBUEwsRUFPUyxNQUFPLEVBUGhCLEVBT29CLE1BQU87QUFQM0IsRUFBekI7QUFTQSxRQUFPLFVBQUNGLElBQUQsRUFBVTtBQUNoQixNQUFNRyxRQUFRWCxPQUFPWSxJQUFQLENBQVlKLElBQVosQ0FBZDtBQUNBLE1BQU1LLFFBQVFGLE1BQU0sQ0FBTixDQUFkO0FBQ0EsTUFBTU4sU0FBU00sTUFBTSxDQUFOLENBQWY7QUFDQSxNQUFNRyxRQUFRSixpQkFBaUJHLE1BQU1FLFdBQU4sRUFBakIsQ0FBZDtBQUNBLFNBQU9ELFFBQVEsQ0FBQ0UsU0FBU1gsTUFBVCxJQUFtQixDQUFwQixJQUF5QixFQUF4QztBQUNBLEVBTkQ7QUFPQSxDQWxCb0IsRUFBckI7O0FBb0JBWSxPQUFPQyxPQUFQLEdBQWlCLEVBQUM5QixvQkFBRCxFQUFZRyw4QkFBWixFQUE0Qk8sa0JBQTVCLEVBQXNDRixrQkFBdEMsRUFBZ0RHLGdCQUFoRCxFQUF5REcsd0JBQXpELEVBQXNFTyx3QkFBdEUsRUFBakIiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGNsZWFuTmFtZShzdHIpe1xuXHQvL2FibGV0b24gYWRkcyBzb21lIHdlaXJkIHN0dWZmIHRvIHRoZSB0cmFja1xuXHRyZXR1cm4gc3RyLnJlcGxhY2UoL1xcdTAwMDAvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRpY2tzVG9TZWNvbmRzKHRpY2tzLCBoZWFkZXIpe1xuXHRyZXR1cm4gKDYwIC8gaGVhZGVyLmJwbSkgKiAodGlja3MgLyBoZWFkZXIuUFBRKTtcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIodmFsKXtcblx0cmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInXG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCl7XG5cdHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJ1xufVxuXG5jb25zdCBpc1BpdGNoID0gKGZ1bmN0aW9uKCl7XG5cdGNvbnN0IHJlZ2V4cCA9IC9eKFthLWddezF9KD86YnwjfHh8YmIpPykoLT9bMC05XSspL2lcblx0cmV0dXJuICh2YWwpID0+IHtcblx0XHRyZXR1cm4gaXNTdHJpbmcodmFsKSAmJiByZWdleHAudGVzdCh2YWwpXG5cdH1cbn0oKSlcblxuXG5mdW5jdGlvbiBtaWRpVG9QaXRjaChtaWRpKXtcblx0Y29uc3Qgc2NhbGVJbmRleFRvTm90ZSA9IFtcIkNcIiwgXCJDI1wiLCBcIkRcIiwgXCJEI1wiLCBcIkVcIiwgXCJGXCIsIFwiRiNcIiwgXCJHXCIsIFwiRyNcIiwgXCJBXCIsIFwiQSNcIiwgXCJCXCJdO1xuXHRjb25zdCBvY3RhdmUgPSBNYXRoLmZsb29yKG1pZGkgLyAxMikgLSAxO1xuXHRjb25zdCBub3RlID0gbWlkaSAlIDEyO1xuXHRyZXR1cm4gc2NhbGVJbmRleFRvTm90ZVtub3RlXSArIG9jdGF2ZTtcbn1cblxuY29uc3QgcGl0Y2hUb01pZGkgPSAoZnVuY3Rpb24oKXtcblx0Y29uc3QgcmVnZXhwID0gL14oW2EtZ117MX0oPzpifCN8eHxiYik/KSgtP1swLTldKykvaVxuXHRjb25zdCBub3RlVG9TY2FsZUluZGV4ID0ge1xuXHRcdFwiY2JiXCIgOiAtMiwgXCJjYlwiIDogLTEsIFwiY1wiIDogMCwgIFwiYyNcIiA6IDEsICBcImN4XCIgOiAyLCBcblx0XHRcImRiYlwiIDogMCwgIFwiZGJcIiA6IDEsICBcImRcIiA6IDIsICBcImQjXCIgOiAzLCAgXCJkeFwiIDogNCxcblx0XHRcImViYlwiIDogMiwgIFwiZWJcIiA6IDMsICBcImVcIiA6IDQsICBcImUjXCIgOiA1LCAgXCJleFwiIDogNiwgXG5cdFx0XCJmYmJcIiA6IDMsICBcImZiXCIgOiA0LCAgXCJmXCIgOiA1LCAgXCJmI1wiIDogNiwgIFwiZnhcIiA6IDcsXG5cdFx0XCJnYmJcIiA6IDUsICBcImdiXCIgOiA2LCAgXCJnXCIgOiA3LCAgXCJnI1wiIDogOCwgIFwiZ3hcIiA6IDksXG5cdFx0XCJhYmJcIiA6IDcsICBcImFiXCIgOiA4LCAgXCJhXCIgOiA5LCAgXCJhI1wiIDogMTAsIFwiYXhcIiA6IDExLFxuXHRcdFwiYmJiXCIgOiA5LCAgXCJiYlwiIDogMTAsIFwiYlwiIDogMTEsIFwiYiNcIiA6IDEyLCBcImJ4XCIgOiAxMyxcblx0fVxuXHRyZXR1cm4gKG5vdGUpID0+IHtcblx0XHRjb25zdCBzcGxpdCA9IHJlZ2V4cC5leGVjKG5vdGUpXG5cdFx0Y29uc3QgcGl0Y2ggPSBzcGxpdFsxXVxuXHRcdGNvbnN0IG9jdGF2ZSA9IHNwbGl0WzJdXG5cdFx0Y29uc3QgaW5kZXggPSBub3RlVG9TY2FsZUluZGV4W3BpdGNoLnRvTG93ZXJDYXNlKCldXG5cdFx0cmV0dXJuIGluZGV4ICsgKHBhcnNlSW50KG9jdGF2ZSkgKyAxKSAqIDEyXG5cdH1cbn0oKSlcblxubW9kdWxlLmV4cG9ydHMgPSB7Y2xlYW5OYW1lLCB0aWNrc1RvU2Vjb25kcywgaXNTdHJpbmcsIGlzTnVtYmVyLCBpc1BpdGNoLCBtaWRpVG9QaXRjaCwgcGl0Y2hUb01pZGl9XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1V0aWwuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.Track = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Note = __webpack_require__(7);\n\nvar _Control = __webpack_require__(8);\n\nvar _Merge = __webpack_require__(9);\n\nvar _BinaryInsert = __webpack_require__(10);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Track = function () {\n\tfunction Track() {\n\t\tvar name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\t\tvar instrument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n\t\t_classCallCheck(this, Track);\n\n\t\t/**\n   * The name of the track\n   * @type {String}\n   */\n\t\tthis.name = name;\n\n\t\t/**\n   * The note events\n   * @type {Array}\n   */\n\t\tthis.notes = [];\n\n\t\t/**\n   * The control changes\n   * @type {Object}\n   */\n\t\tthis.controlChanges = {};\n\n\t\t/**\n   * The tracks insturment if one exists\n   * @type {String}\n   */\n\t\tthis.instrument = '';\n\t}\n\n\t_createClass(Track, [{\n\t\tkey: 'note',\n\t\tvalue: function note(midi, time) {\n\t\t\tvar duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\t\t\tvar velocity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n\t\t\tvar note = new _Note.Note(midi, time, duration, velocity);\n\t\t\t(0, _BinaryInsert.BinaryInsert)(this.notes, note);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * Add a note on event\n   * @param  {Number|String} midi     The midi note as either a midi number or \n   *                                  Pitch Notation like ('C#4')\n   * @param  {Number} time     The time in seconds\n   * @param  {Number} velocity The velocity value 0-1\n   * @return {Track} this\n   */\n\n\t}, {\n\t\tkey: 'noteOn',\n\t\tvalue: function noteOn(midi, time) {\n\t\t\tvar velocity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n\t\t\tvar note = new _Note.Note(midi, time, 0, velocity);\n\t\t\t(0, _BinaryInsert.BinaryInsert)(this.notes, note);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * Add a note off event. Go through and find an unresolved\n   * noteOn event with the same pitch.\n   * @param  {String|Number} midi The midi number or note name.\n   * @param  {Number} time The time of the event in seconds\n   * @return {Track} this\n   */\n\n\t}, {\n\t\tkey: 'noteOff',\n\t\tvalue: function noteOff(midi, time) {\n\t\t\tfor (var i = 0; i < this.notes.length; i++) {\n\t\t\t\tvar note = this.notes[i];\n\t\t\t\tif (note.match(midi) && note.duration === 0) {\n\t\t\t\t\tnote.noteOff = time;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * Add a CC event\n   * @param  {Number} num The CC number\n   * @param  {Number} time The time of the event in seconds\n   * @param {Number} value The value of the CC\n   * @return {Track} this\n   */\n\n\t}, {\n\t\tkey: 'cc',\n\t\tvalue: function cc(num, time, value) {\n\t\t\tif (!this.controlChanges.hasOwnProperty(num)) {\n\t\t\t\tthis.controlChanges[num] = [];\n\t\t\t}\n\t\t\tvar cc = new _Control.Control(num, time, value);\n\t\t\t(0, _BinaryInsert.BinaryInsert)(this.controlChanges[num], cc);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * An array of all the note on events\n   * @type {Array<Object>}\n   * @readOnly\n   */\n\n\t}, {\n\t\tkey: 'scale',\n\n\n\t\t/**\n   * Scale the timing of all the events in the track\n   * @param {Number} amount The amount to scale all the values\n   */\n\t\tvalue: function scale(amount) {\n\t\t\tthis.notes.forEach(function (note) {\n\t\t\t\tnote.time *= amount;\n\t\t\t\tnote.duration *= amount;\n\t\t\t});\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   * Slice returns a new track with only events that occured between startTime and endTime. \n   * Modifies this track.\n   * @param {Number} startTime\n   * @param {Number} endTime\n   * @returns {Track}\n   */\n\n\t}, {\n\t\tkey: 'slice',\n\t\tvalue: function slice() {\n\t\t\tvar startTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\t\t\tvar endTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.duration;\n\n\t\t\t// get the index before the startTime\n\t\t\tvar noteStartIndex = Math.max(this.notes.findIndex(function (note) {\n\t\t\t\treturn note.time >= startTime;\n\t\t\t}), 0);\n\t\t\tvar noteEndIndex = this.notes.findIndex(function (note) {\n\t\t\t\treturn note.noteOff >= endTime;\n\t\t\t}) + 1;\n\t\t\tvar track = new Track(this.name);\n\t\t\ttrack.notes = this.notes.slice(noteStartIndex, noteEndIndex);\n\t\t\t//shift the start time\n\t\t\ttrack.notes.forEach(function (note) {\n\t\t\t\treturn note.time = note.time - startTime;\n\t\t\t});\n\t\t\treturn track;\n\t\t}\n\n\t\t/**\n   * Write the output to the stream\n   */\n\n\t}, {\n\t\tkey: 'encode',\n\t\tvalue: function encode(trackEncoder, header) {\n\n\t\t\tvar ticksPerSecond = header.PPQ / (60 / header.bpm);\n\t\t\tvar lastEventTime = 0;\n\n\t\t\tvar CHANNEL = 0;\n\n\t\t\tfunction getDeltaTime(time) {\n\t\t\t\tvar ticks = Math.floor(ticksPerSecond * time);\n\t\t\t\tvar delta = Math.max(ticks - lastEventTime, 0);\n\t\t\t\tlastEventTime = ticks;\n\t\t\t\treturn delta;\n\t\t\t}\n\n\t\t\t(0, _Merge.Merge)(this.noteOns, function (noteOn) {\n\t\t\t\ttrackEncoder.addNoteOn(CHANNEL, noteOn.name, getDeltaTime(noteOn.time), Math.floor(noteOn.velocity * 127));\n\t\t\t}, this.noteOffs, function (noteOff) {\n\t\t\t\ttrackEncoder.addNoteOff(CHANNEL, noteOff.name, getDeltaTime(noteOff.time));\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'noteOns',\n\t\tget: function get() {\n\t\t\tvar noteOns = [];\n\t\t\tthis.notes.forEach(function (note) {\n\t\t\t\tnoteOns.push({\n\t\t\t\t\ttime: note.noteOn,\n\t\t\t\t\tmidi: note.midi,\n\t\t\t\t\tname: note.name,\n\t\t\t\t\tvelocity: note.velocity\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn noteOns;\n\t\t}\n\n\t\t/**\n   * An array of all the noteOff events\n   * @type {Array<Object>}\n   * @readOnly\n   */\n\n\t}, {\n\t\tkey: 'noteOffs',\n\t\tget: function get() {\n\t\t\tvar noteOffs = [];\n\t\t\tthis.notes.forEach(function (note) {\n\t\t\t\tnoteOffs.push({\n\t\t\t\t\ttime: note.noteOff,\n\t\t\t\t\tmidi: note.midi,\n\t\t\t\t\tname: note.name\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn noteOffs;\n\t\t}\n\n\t\t/**\n   * The length in seconds of the track\n   * @type {Number}\n   */\n\n\t}, {\n\t\tkey: 'length',\n\t\tget: function get() {\n\t\t\treturn this.notes.length;\n\t\t}\n\n\t\t/**\n   * The time of the first event in seconds\n   * @type {Number}\n   */\n\n\t}, {\n\t\tkey: 'startTime',\n\t\tget: function get() {\n\t\t\tif (this.notes.length) {\n\t\t\t\tvar firstNote = this.notes[0];\n\t\t\t\treturn firstNote.noteOn;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * The time of the last event in seconds\n   * @type {Number}\n   */\n\n\t}, {\n\t\tkey: 'duration',\n\t\tget: function get() {\n\t\t\tif (this.notes.length) {\n\t\t\t\tvar lastNote = this.notes[this.notes.length - 1];\n\t\t\t\treturn lastNote.noteOff;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}]);\n\n\treturn Track;\n}();\n\nexports.Track = Track;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.Note = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Util = __webpack_require__(5);\n\nvar _Util2 = _interopRequireDefault(_Util);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Note = function () {\n\tfunction Note(midi, time) {\n\t\tvar duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\t\tvar velocity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n\t\t_classCallCheck(this, Note);\n\n\t\t/**\n   * The MIDI note number\n   * @type {Number}\n   */\n\t\tthis.midi;\n\n\t\tif (_Util2.default.isNumber(midi)) {\n\t\t\tthis.midi = midi;\n\t\t} else if (_Util2.default.isPitch(midi)) {\n\t\t\tthis.name = midi;\n\t\t} else {\n\t\t\tthrow new Error('the midi value must either be in Pitch Notation (e.g. C#4) or a midi value');\n\t\t}\n\n\t\t/**\n   * The note on time in seconds\n   * @type {Number}\n   */\n\t\tthis.time = time;\n\n\t\t/**\n   * The duration in seconds\n   * @type {Number}\n   */\n\t\tthis.duration = duration;\n\n\t\t/**\n   * The velocity 0-1\n   * @type {Number}\n   */\n\t\tthis.velocity = velocity;\n\t}\n\n\t/**\n  * If the note is the same as the given note\n  * @param {String|Number} note\n  * @return {Boolean}\n  */\n\n\n\t_createClass(Note, [{\n\t\tkey: 'match',\n\t\tvalue: function match(note) {\n\t\t\tif (_Util2.default.isNumber(note)) {\n\t\t\t\treturn this.midi === note;\n\t\t\t} else if (_Util2.default.isPitch(note)) {\n\t\t\t\treturn this.name.toLowerCase() === note.toLowerCase();\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * The note in Scientific Pitch Notation\n   * @type {String}\n   */\n\n\t}, {\n\t\tkey: 'toJSON',\n\n\n\t\t/**\n   * Convert the note to JSON\n   * @returns {Object}\n   */\n\t\tvalue: function toJSON() {\n\t\t\treturn {\n\t\t\t\tname: this.name,\n\t\t\t\tmidi: this.midi,\n\t\t\t\ttime: this.time,\n\t\t\t\tvelocity: this.velocity,\n\t\t\t\tduration: this.duration\n\t\t\t};\n\t\t}\n\t}, {\n\t\tkey: 'name',\n\t\tget: function get() {\n\t\t\treturn _Util2.default.midiToPitch(this.midi);\n\t\t},\n\t\tset: function set(name) {\n\t\t\tthis.midi = _Util2.default.pitchToMidi(name);\n\t\t}\n\n\t\t/**\n   * Alias for time\n   * @type {Number}\n   */\n\n\t}, {\n\t\tkey: 'noteOn',\n\t\tget: function get() {\n\t\t\treturn this.time;\n\t\t},\n\t\tset: function set(t) {\n\t\t\tthis.time = t;\n\t\t}\n\n\t\t/**\n   * The note off time\n   * @type {Number}\n   */\n\n\t}, {\n\t\tkey: 'noteOff',\n\t\tget: function get() {\n\t\t\treturn this.time + this.duration;\n\t\t},\n\t\tset: function set(time) {\n\t\t\tthis.duration = time - this.time;\n\t\t}\n\t}]);\n\n\treturn Note;\n}();\n\nexports.Note = Note;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvTm90ZS5qcz9iNDAwIl0sIm5hbWVzIjpbIk5vdGUiLCJtaWRpIiwidGltZSIsImR1cmF0aW9uIiwidmVsb2NpdHkiLCJpc051bWJlciIsImlzUGl0Y2giLCJuYW1lIiwiRXJyb3IiLCJub3RlIiwidG9Mb3dlckNhc2UiLCJtaWRpVG9QaXRjaCIsInBpdGNoVG9NaWRpIiwidCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0lBRU1BLEk7QUFDTCxlQUFZQyxJQUFaLEVBQWtCQyxJQUFsQixFQUErQztBQUFBLE1BQXZCQyxRQUF1Qix1RUFBZCxDQUFjO0FBQUEsTUFBWEMsUUFBVyx1RUFBRixDQUFFOztBQUFBOztBQUU5Qzs7OztBQUlBLE9BQUtILElBQUw7O0FBRUEsTUFBSSxlQUFLSSxRQUFMLENBQWNKLElBQWQsQ0FBSixFQUF3QjtBQUN2QixRQUFLQSxJQUFMLEdBQVlBLElBQVo7QUFDQSxHQUZELE1BRU8sSUFBSSxlQUFLSyxPQUFMLENBQWFMLElBQWIsQ0FBSixFQUF1QjtBQUM3QixRQUFLTSxJQUFMLEdBQVlOLElBQVo7QUFDQSxHQUZNLE1BRUE7QUFDTixTQUFNLElBQUlPLEtBQUosQ0FBVSw0RUFBVixDQUFOO0FBQ0E7O0FBRUQ7Ozs7QUFJQSxPQUFLTixJQUFMLEdBQVlBLElBQVo7O0FBRUE7Ozs7QUFJQSxPQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjs7QUFFQTs7OztBQUlBLE9BQUtDLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0E7O0FBRUQ7Ozs7Ozs7Ozt3QkFLTUssSSxFQUFLO0FBQ1YsT0FBSSxlQUFLSixRQUFMLENBQWNJLElBQWQsQ0FBSixFQUF3QjtBQUN2QixXQUFPLEtBQUtSLElBQUwsS0FBY1EsSUFBckI7QUFDQSxJQUZELE1BRU8sSUFBSSxlQUFLSCxPQUFMLENBQWFHLElBQWIsQ0FBSixFQUF1QjtBQUM3QixXQUFPLEtBQUtGLElBQUwsQ0FBVUcsV0FBVixPQUE0QkQsS0FBS0MsV0FBTCxFQUFuQztBQUNBO0FBQ0Q7O0FBRUQ7Ozs7Ozs7OztBQWlDQTs7OzsyQkFJUTtBQUNQLFVBQU87QUFDTkgsVUFBTyxLQUFLQSxJQUROO0FBRU5OLFVBQU8sS0FBS0EsSUFGTjtBQUdOQyxVQUFPLEtBQUtBLElBSE47QUFJTkUsY0FBVyxLQUFLQSxRQUpWO0FBS05ELGNBQVcsS0FBS0E7QUFMVixJQUFQO0FBT0E7OztzQkF6Q1M7QUFDVCxVQUFPLGVBQUtRLFdBQUwsQ0FBaUIsS0FBS1YsSUFBdEIsQ0FBUDtBQUNBLEc7b0JBQ1FNLEksRUFBSztBQUNiLFFBQUtOLElBQUwsR0FBWSxlQUFLVyxXQUFMLENBQWlCTCxJQUFqQixDQUFaO0FBQ0E7O0FBRUQ7Ozs7Ozs7c0JBSVk7QUFDWCxVQUFPLEtBQUtMLElBQVo7QUFDQSxHO29CQUNVVyxDLEVBQUU7QUFDWixRQUFLWCxJQUFMLEdBQVlXLENBQVo7QUFDQTs7QUFFRDs7Ozs7OztzQkFJYTtBQUNaLFVBQU8sS0FBS1gsSUFBTCxHQUFZLEtBQUtDLFFBQXhCO0FBQ0EsRztvQkFDV0QsSSxFQUFLO0FBQ2hCLFFBQUtDLFFBQUwsR0FBZ0JELE9BQU8sS0FBS0EsSUFBNUI7QUFDQTs7Ozs7O1FBaUJNRixJLEdBQUFBLEkiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVdGlsIGZyb20gJy4vVXRpbCdcblxuY2xhc3MgTm90ZXtcblx0Y29uc3RydWN0b3IobWlkaSwgdGltZSwgZHVyYXRpb249MCwgdmVsb2NpdHk9MSl7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgTUlESSBub3RlIG51bWJlclxuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5taWRpO1xuXG5cdFx0aWYgKFV0aWwuaXNOdW1iZXIobWlkaSkpe1xuXHRcdFx0dGhpcy5taWRpID0gbWlkaVxuXHRcdH0gZWxzZSBpZiAoVXRpbC5pc1BpdGNoKG1pZGkpKXtcblx0XHRcdHRoaXMubmFtZSA9IG1pZGlcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCd0aGUgbWlkaSB2YWx1ZSBtdXN0IGVpdGhlciBiZSBpbiBQaXRjaCBOb3RhdGlvbiAoZS5nLiBDIzQpIG9yIGEgbWlkaSB2YWx1ZScpXG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5vdGUgb24gdGltZSBpbiBzZWNvbmRzXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnRpbWUgPSB0aW1lXG5cblx0XHQvKipcblx0XHQgKiBUaGUgZHVyYXRpb24gaW4gc2Vjb25kc1xuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uXG5cblx0XHQvKipcblx0XHQgKiBUaGUgdmVsb2NpdHkgMC0xXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnZlbG9jaXR5ID0gdmVsb2NpdHlcblx0fVxuXG5cdC8qKlxuXHQgKiBJZiB0aGUgbm90ZSBpcyB0aGUgc2FtZSBhcyB0aGUgZ2l2ZW4gbm90ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IG5vdGVcblx0ICogQHJldHVybiB7Qm9vbGVhbn1cblx0ICovXG5cdG1hdGNoKG5vdGUpe1xuXHRcdGlmIChVdGlsLmlzTnVtYmVyKG5vdGUpKXtcblx0XHRcdHJldHVybiB0aGlzLm1pZGkgPT09IG5vdGVcblx0XHR9IGVsc2UgaWYgKFV0aWwuaXNQaXRjaChub3RlKSl7XG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vdGUudG9Mb3dlckNhc2UoKVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgbm90ZSBpbiBTY2llbnRpZmljIFBpdGNoIE5vdGF0aW9uXG5cdCAqIEB0eXBlIHtTdHJpbmd9XG5cdCAqL1xuXHRnZXQgbmFtZSgpe1xuXHRcdHJldHVybiBVdGlsLm1pZGlUb1BpdGNoKHRoaXMubWlkaSlcblx0fVxuXHRzZXQgbmFtZShuYW1lKXtcblx0XHR0aGlzLm1pZGkgPSBVdGlsLnBpdGNoVG9NaWRpKG5hbWUpXG5cdH1cblxuXHQvKipcblx0ICogQWxpYXMgZm9yIHRpbWVcblx0ICogQHR5cGUge051bWJlcn1cblx0ICovXG5cdGdldCBub3RlT24oKXtcblx0XHRyZXR1cm4gdGhpcy50aW1lXG5cdH1cblx0c2V0IG5vdGVPbih0KXtcblx0XHR0aGlzLnRpbWUgPSB0XG5cdH1cblxuXHQvKipcblx0ICogVGhlIG5vdGUgb2ZmIHRpbWVcblx0ICogQHR5cGUge051bWJlcn1cblx0ICovXG5cdGdldCBub3RlT2ZmKCl7XG5cdFx0cmV0dXJuIHRoaXMudGltZSArIHRoaXMuZHVyYXRpb25cblx0fVxuXHRzZXQgbm90ZU9mZih0aW1lKXtcblx0XHR0aGlzLmR1cmF0aW9uID0gdGltZSAtIHRoaXMudGltZVxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnQgdGhlIG5vdGUgdG8gSlNPTlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fVxuXHQgKi9cblx0dG9KU09OKCl7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG5hbWUgOiB0aGlzLm5hbWUsXG5cdFx0XHRtaWRpIDogdGhpcy5taWRpLFxuXHRcdFx0dGltZSA6IHRoaXMudGltZSxcblx0XHRcdHZlbG9jaXR5IDogdGhpcy52ZWxvY2l0eSxcblx0XHRcdGR1cmF0aW9uIDogdGhpcy5kdXJhdGlvblxuXHRcdH1cblx0fVxufVxuXG5leHBvcnQge05vdGV9XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL05vdGUuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 8 */
/***/ function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar channelNames = {\n\t\"1\": \"modulationWheel\",\n\t\"2\": \"breath\",\n\t\"4\": \"footController\",\n\t\"5\": \"portamentoTime\",\n\t\"7\": \"volume\",\n\t\"8\": \"balance\",\n\t\"10\": \"pan\",\n\t\"64\": \"sustain\",\n\t\"65\": \"portamentoTime\",\n\t\"66\": \"sostenuto\",\n\t\"67\": \"softPedal\",\n\t\"68\": \"legatoFootswitch\",\n\t\"84\": \"portamentoContro\"\n};\n\nvar Control = function () {\n\tfunction Control(number, time, value) {\n\t\t_classCallCheck(this, Control);\n\n\t\tthis.number = number;\n\n\t\tthis.time = time;\n\n\t\tthis.value = value;\n\t}\n\n\t/**\n  * The common name of the control change event\n  * @type {String}\n  * @readOnly\n  */\n\n\n\t_createClass(Control, [{\n\t\tkey: \"name\",\n\t\tget: function get() {\n\t\t\tif (channelNames.hasOwnProperty(this.number)) {\n\t\t\t\treturn channelNames[this.number];\n\t\t\t}\n\t\t}\n\t}]);\n\n\treturn Control;\n}();\n\nexports.Control = Control;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29udHJvbC5qcz8yYzllIl0sIm5hbWVzIjpbImNoYW5uZWxOYW1lcyIsIkNvbnRyb2wiLCJudW1iZXIiLCJ0aW1lIiwidmFsdWUiLCJoYXNPd25Qcm9wZXJ0eSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQU1BLGVBQWU7QUFDcEIsTUFBTyxpQkFEYTtBQUVwQixNQUFPLFFBRmE7QUFHcEIsTUFBTyxnQkFIYTtBQUlwQixNQUFPLGdCQUphO0FBS3BCLE1BQU8sUUFMYTtBQU1wQixNQUFPLFNBTmE7QUFPcEIsT0FBTyxLQVBhO0FBUXBCLE9BQU8sU0FSYTtBQVNwQixPQUFPLGdCQVRhO0FBVXBCLE9BQU8sV0FWYTtBQVdwQixPQUFPLFdBWGE7QUFZcEIsT0FBTyxrQkFaYTtBQWFwQixPQUFPO0FBYmEsQ0FBckI7O0lBZ0JNQyxPO0FBQ0wsa0JBQVlDLE1BQVosRUFBb0JDLElBQXBCLEVBQTBCQyxLQUExQixFQUFnQztBQUFBOztBQUUvQixPQUFLRixNQUFMLEdBQWNBLE1BQWQ7O0FBRUEsT0FBS0MsSUFBTCxHQUFZQSxJQUFaOztBQUVBLE9BQUtDLEtBQUwsR0FBYUEsS0FBYjtBQUNBOztBQUVEOzs7Ozs7Ozs7c0JBS1U7QUFDVCxPQUFJSixhQUFhSyxjQUFiLENBQTRCLEtBQUtILE1BQWpDLENBQUosRUFBNkM7QUFDNUMsV0FBT0YsYUFBYSxLQUFLRSxNQUFsQixDQUFQO0FBQ0E7QUFDRDs7Ozs7O1FBR01ELE8sR0FBQUEsTyIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY2hhbm5lbE5hbWVzID0ge1xuXHRcIjFcIiAgOiBcIm1vZHVsYXRpb25XaGVlbFwiLFxuXHRcIjJcIiAgOiBcImJyZWF0aFwiLFxuXHRcIjRcIiAgOiBcImZvb3RDb250cm9sbGVyXCIsXG5cdFwiNVwiICA6IFwicG9ydGFtZW50b1RpbWVcIixcblx0XCI3XCIgIDogXCJ2b2x1bWVcIixcblx0XCI4XCIgIDogXCJiYWxhbmNlXCIsXG5cdFwiMTBcIiA6IFwicGFuXCIsXG5cdFwiNjRcIiA6IFwic3VzdGFpblwiLFxuXHRcIjY1XCIgOiBcInBvcnRhbWVudG9UaW1lXCIsXG5cdFwiNjZcIiA6IFwic29zdGVudXRvXCIsXG5cdFwiNjdcIiA6IFwic29mdFBlZGFsXCIsXG5cdFwiNjhcIiA6IFwibGVnYXRvRm9vdHN3aXRjaFwiLFxuXHRcIjg0XCIgOiBcInBvcnRhbWVudG9Db250cm9cIlxufVxuXG5jbGFzcyBDb250cm9se1xuXHRjb25zdHJ1Y3RvcihudW1iZXIsIHRpbWUsIHZhbHVlKXtcblxuXHRcdHRoaXMubnVtYmVyID0gbnVtYmVyXG5cblx0XHR0aGlzLnRpbWUgPSB0aW1lXG5cblx0XHR0aGlzLnZhbHVlID0gdmFsdWVcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgY29tbW9uIG5hbWUgb2YgdGhlIGNvbnRyb2wgY2hhbmdlIGV2ZW50XG5cdCAqIEB0eXBlIHtTdHJpbmd9XG5cdCAqIEByZWFkT25seVxuXHQgKi9cblx0Z2V0IG5hbWUoKXtcblx0XHRpZiAoY2hhbm5lbE5hbWVzLmhhc093blByb3BlcnR5KHRoaXMubnVtYmVyKSl7XG5cdFx0XHRyZXR1cm4gY2hhbm5lbE5hbWVzW3RoaXMubnVtYmVyXVxuXHRcdH1cblx0fVxufVxuXG5leHBvcnQge0NvbnRyb2x9XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0NvbnRyb2wuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 9 */
/***/ function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nfunction hasMoreValues(arrays, positions) {\n\tfor (var i = 0; i < arrays.length; i++) {\n\t\tvar arr = arrays[i];\n\t\tvar pos = positions[i];\n\t\tif (arr.length > pos) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction getLowestAtPosition(arrays, positions, encoders) {\n\tvar lowestIndex = 0;\n\tvar lowestValue = Infinity;\n\tfor (var i = 0; i < arrays.length; i++) {\n\t\tvar arr = arrays[i];\n\t\tvar pos = positions[i];\n\t\tif (arr[pos] && arr[pos].time < lowestValue) {\n\t\t\tlowestIndex = i;\n\t\t\tlowestValue = arr[pos].time;\n\t\t}\n\t}\n\tencoders[lowestIndex](arrays[lowestIndex][positions[lowestIndex]]);\n\t// increment array\n\tpositions[lowestIndex] += 1;\n}\n\n/**\n * Combine multiple arrays keeping the timing in order\n * The arguments should alternate between the array and the encoder callback\n * @param {...Array|Function} args\n */\nfunction Merge() {\n\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\targs[_key] = arguments[_key];\n\t}\n\n\tvar arrays = args.filter(function (v, i) {\n\t\treturn i % 2 === 0;\n\t});\n\tvar positions = new Uint32Array(arrays.length);\n\tvar encoders = args.filter(function (v, i) {\n\t\treturn i % 2 === 1;\n\t});\n\tvar output = [];\n\twhile (hasMoreValues(arrays, positions)) {\n\t\tgetLowestAtPosition(arrays, positions, encoders);\n\t}\n}\n\nexports.Merge = Merge;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvTWVyZ2UuanM/Yzc4NiJdLCJuYW1lcyI6WyJoYXNNb3JlVmFsdWVzIiwiYXJyYXlzIiwicG9zaXRpb25zIiwiaSIsImxlbmd0aCIsImFyciIsInBvcyIsImdldExvd2VzdEF0UG9zaXRpb24iLCJlbmNvZGVycyIsImxvd2VzdEluZGV4IiwibG93ZXN0VmFsdWUiLCJJbmZpbml0eSIsInRpbWUiLCJNZXJnZSIsImFyZ3MiLCJmaWx0ZXIiLCJ2IiwiVWludDMyQXJyYXkiLCJvdXRwdXQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLFNBQVNBLGFBQVQsQ0FBdUJDLE1BQXZCLEVBQStCQyxTQUEvQixFQUF5QztBQUN4QyxNQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsT0FBT0csTUFBM0IsRUFBbUNELEdBQW5DLEVBQXVDO0FBQ3RDLE1BQUlFLE1BQU1KLE9BQU9FLENBQVAsQ0FBVjtBQUNBLE1BQUlHLE1BQU1KLFVBQVVDLENBQVYsQ0FBVjtBQUNBLE1BQUlFLElBQUlELE1BQUosR0FBYUUsR0FBakIsRUFBcUI7QUFDcEIsVUFBTyxJQUFQO0FBQ0E7QUFDRDtBQUNELFFBQU8sS0FBUDtBQUNBOztBQUVELFNBQVNDLG1CQUFULENBQTZCTixNQUE3QixFQUFxQ0MsU0FBckMsRUFBZ0RNLFFBQWhELEVBQXlEO0FBQ3hELEtBQUlDLGNBQWMsQ0FBbEI7QUFDQSxLQUFJQyxjQUFjQyxRQUFsQjtBQUNBLE1BQUssSUFBSVIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRixPQUFPRyxNQUEzQixFQUFtQ0QsR0FBbkMsRUFBdUM7QUFDdEMsTUFBSUUsTUFBTUosT0FBT0UsQ0FBUCxDQUFWO0FBQ0EsTUFBSUcsTUFBTUosVUFBVUMsQ0FBVixDQUFWO0FBQ0EsTUFBSUUsSUFBSUMsR0FBSixLQUFhRCxJQUFJQyxHQUFKLEVBQVNNLElBQVQsR0FBZ0JGLFdBQWpDLEVBQThDO0FBQzdDRCxpQkFBY04sQ0FBZDtBQUNBTyxpQkFBY0wsSUFBSUMsR0FBSixFQUFTTSxJQUF2QjtBQUNBO0FBQ0Q7QUFDREosVUFBU0MsV0FBVCxFQUFzQlIsT0FBT1EsV0FBUCxFQUFvQlAsVUFBVU8sV0FBVixDQUFwQixDQUF0QjtBQUNBO0FBQ0FQLFdBQVVPLFdBQVYsS0FBMEIsQ0FBMUI7QUFDQTs7QUFFRDs7Ozs7QUFLQSxTQUFTSSxLQUFULEdBQXVCO0FBQUEsbUNBQUxDLElBQUs7QUFBTEEsTUFBSztBQUFBOztBQUN0QixLQUFNYixTQUFTYSxLQUFLQyxNQUFMLENBQVksVUFBQ0MsQ0FBRCxFQUFJYixDQUFKO0FBQUEsU0FBV0EsSUFBSSxDQUFMLEtBQVksQ0FBdEI7QUFBQSxFQUFaLENBQWY7QUFDQSxLQUFNRCxZQUFZLElBQUllLFdBQUosQ0FBZ0JoQixPQUFPRyxNQUF2QixDQUFsQjtBQUNBLEtBQU1JLFdBQVdNLEtBQUtDLE1BQUwsQ0FBWSxVQUFDQyxDQUFELEVBQUliLENBQUo7QUFBQSxTQUFXQSxJQUFJLENBQUwsS0FBWSxDQUF0QjtBQUFBLEVBQVosQ0FBakI7QUFDQSxLQUFNZSxTQUFTLEVBQWY7QUFDQSxRQUFNbEIsY0FBY0MsTUFBZCxFQUFzQkMsU0FBdEIsQ0FBTixFQUF1QztBQUN0Q0ssc0JBQW9CTixNQUFwQixFQUE0QkMsU0FBNUIsRUFBdUNNLFFBQXZDO0FBQ0E7QUFDRDs7UUFFT0ssSyxHQUFBQSxLIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmZ1bmN0aW9uIGhhc01vcmVWYWx1ZXMoYXJyYXlzLCBwb3NpdGlvbnMpe1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5cy5sZW5ndGg7IGkrKyl7XG5cdFx0bGV0IGFyciA9IGFycmF5c1tpXVxuXHRcdGxldCBwb3MgPSBwb3NpdGlvbnNbaV1cblx0XHRpZiAoYXJyLmxlbmd0aCA+IHBvcyl7XG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gZ2V0TG93ZXN0QXRQb3NpdGlvbihhcnJheXMsIHBvc2l0aW9ucywgZW5jb2RlcnMpe1xuXHRsZXQgbG93ZXN0SW5kZXggPSAwXG5cdGxldCBsb3dlc3RWYWx1ZSA9IEluZmluaXR5XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlzLmxlbmd0aDsgaSsrKXtcblx0XHRsZXQgYXJyID0gYXJyYXlzW2ldXG5cdFx0bGV0IHBvcyA9IHBvc2l0aW9uc1tpXVxuXHRcdGlmIChhcnJbcG9zXSAmJiAoYXJyW3Bvc10udGltZSA8IGxvd2VzdFZhbHVlKSl7XG5cdFx0XHRsb3dlc3RJbmRleCA9IGlcblx0XHRcdGxvd2VzdFZhbHVlID0gYXJyW3Bvc10udGltZVxuXHRcdH1cblx0fVxuXHRlbmNvZGVyc1tsb3dlc3RJbmRleF0oYXJyYXlzW2xvd2VzdEluZGV4XVtwb3NpdGlvbnNbbG93ZXN0SW5kZXhdXSlcblx0Ly8gaW5jcmVtZW50IGFycmF5XG5cdHBvc2l0aW9uc1tsb3dlc3RJbmRleF0gKz0gMVxufVxuXG4vKipcbiAqIENvbWJpbmUgbXVsdGlwbGUgYXJyYXlzIGtlZXBpbmcgdGhlIHRpbWluZyBpbiBvcmRlclxuICogVGhlIGFyZ3VtZW50cyBzaG91bGQgYWx0ZXJuYXRlIGJldHdlZW4gdGhlIGFycmF5IGFuZCB0aGUgZW5jb2RlciBjYWxsYmFja1xuICogQHBhcmFtIHsuLi5BcnJheXxGdW5jdGlvbn0gYXJnc1xuICovXG5mdW5jdGlvbiBNZXJnZSguLi5hcmdzKXtcblx0Y29uc3QgYXJyYXlzID0gYXJncy5maWx0ZXIoKHYsIGkpID0+IChpICUgMikgPT09IDApXG5cdGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBVaW50MzJBcnJheShhcnJheXMubGVuZ3RoKVxuXHRjb25zdCBlbmNvZGVycyA9IGFyZ3MuZmlsdGVyKCh2LCBpKSA9PiAoaSAlIDIpID09PSAxKVxuXHRjb25zdCBvdXRwdXQgPSBbXVxuXHR3aGlsZShoYXNNb3JlVmFsdWVzKGFycmF5cywgcG9zaXRpb25zKSl7XG5cdFx0Z2V0TG93ZXN0QXRQb3NpdGlvbihhcnJheXMsIHBvc2l0aW9ucywgZW5jb2RlcnMpXG5cdH1cbn1cblxuZXhwb3J0IHtNZXJnZX1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvTWVyZ2UuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 10 */
/***/ function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n/**\n * Return the index of the element at or before the given time\n */\nfunction findElement(array, time) {\n\tvar beginning = 0;\n\tvar len = array.length;\n\tvar end = len;\n\tif (len > 0 && array[len - 1].time <= time) {\n\t\treturn len - 1;\n\t}\n\twhile (beginning < end) {\n\t\t// calculate the midpoint for roughly equal partition\n\t\tvar midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\tvar event = array[midPoint];\n\t\tvar nextEvent = array[midPoint + 1];\n\t\tif (event.time === time) {\n\t\t\t//choose the last one that has the same time\n\t\t\tfor (var i = midPoint; i < array.length; i++) {\n\t\t\t\tvar testEvent = array[i];\n\t\t\t\tif (testEvent.time === time) {\n\t\t\t\t\tmidPoint = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn midPoint;\n\t\t} else if (event.time < time && nextEvent.time > time) {\n\t\t\treturn midPoint;\n\t\t} else if (event.time > time) {\n\t\t\t//search lower\n\t\t\tend = midPoint;\n\t\t} else if (event.time < time) {\n\t\t\t//search upper\n\t\t\tbeginning = midPoint + 1;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n * Does a binary search to insert the note\n * in the correct spot in the array\n * @param  {Array} array\n * @param  {Object} event\n * @param  {Number=} offset\n */\nfunction BinaryInsert(array, event) {\n\tif (array.length) {\n\t\tvar index = findElement(array, event.time);\n\t\tarray.splice(index + 1, 0, event);\n\t} else {\n\t\tarray.push(event);\n\t}\n}\n\nexports.BinaryInsert = BinaryInsert;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQmluYXJ5SW5zZXJ0LmpzP2MyMTkiXSwibmFtZXMiOlsiZmluZEVsZW1lbnQiLCJhcnJheSIsInRpbWUiLCJiZWdpbm5pbmciLCJsZW4iLCJsZW5ndGgiLCJlbmQiLCJtaWRQb2ludCIsIk1hdGgiLCJmbG9vciIsImV2ZW50IiwibmV4dEV2ZW50IiwiaSIsInRlc3RFdmVudCIsIkJpbmFyeUluc2VydCIsImluZGV4Iiwic3BsaWNlIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O0FBR0EsU0FBU0EsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEJDLElBQTVCLEVBQWtDO0FBQ2pDLEtBQUlDLFlBQVksQ0FBaEI7QUFDQSxLQUFNQyxNQUFNSCxNQUFNSSxNQUFsQjtBQUNBLEtBQUlDLE1BQU1GLEdBQVY7QUFDQSxLQUFJQSxNQUFNLENBQU4sSUFBV0gsTUFBTUcsTUFBTSxDQUFaLEVBQWVGLElBQWYsSUFBdUJBLElBQXRDLEVBQTJDO0FBQzFDLFNBQU9FLE1BQU0sQ0FBYjtBQUNBO0FBQ0QsUUFBT0QsWUFBWUcsR0FBbkIsRUFBdUI7QUFDdEI7QUFDQSxNQUFJQyxXQUFXQyxLQUFLQyxLQUFMLENBQVdOLFlBQVksQ0FBQ0csTUFBTUgsU0FBUCxJQUFvQixDQUEzQyxDQUFmO0FBQ0EsTUFBTU8sUUFBUVQsTUFBTU0sUUFBTixDQUFkO0FBQ0EsTUFBTUksWUFBWVYsTUFBTU0sV0FBVyxDQUFqQixDQUFsQjtBQUNBLE1BQUlHLE1BQU1SLElBQU4sS0FBZUEsSUFBbkIsRUFBd0I7QUFDdkI7QUFDQSxRQUFLLElBQUlVLElBQUlMLFFBQWIsRUFBdUJLLElBQUlYLE1BQU1JLE1BQWpDLEVBQXlDTyxHQUF6QyxFQUE2QztBQUM1QyxRQUFJQyxZQUFZWixNQUFNVyxDQUFOLENBQWhCO0FBQ0EsUUFBSUMsVUFBVVgsSUFBVixLQUFtQkEsSUFBdkIsRUFBNEI7QUFDM0JLLGdCQUFXSyxDQUFYO0FBQ0E7QUFDRDtBQUNELFVBQU9MLFFBQVA7QUFDQSxHQVRELE1BU08sSUFBSUcsTUFBTVIsSUFBTixHQUFhQSxJQUFiLElBQXFCUyxVQUFVVCxJQUFWLEdBQWlCQSxJQUExQyxFQUErQztBQUNyRCxVQUFPSyxRQUFQO0FBQ0EsR0FGTSxNQUVBLElBQUlHLE1BQU1SLElBQU4sR0FBYUEsSUFBakIsRUFBc0I7QUFDNUI7QUFDQUksU0FBTUMsUUFBTjtBQUNBLEdBSE0sTUFHQSxJQUFJRyxNQUFNUixJQUFOLEdBQWFBLElBQWpCLEVBQXNCO0FBQzVCO0FBQ0FDLGVBQVlJLFdBQVcsQ0FBdkI7QUFDQTtBQUNEO0FBQ0QsUUFBTyxDQUFDLENBQVI7QUFDQTs7QUFFRDs7Ozs7OztBQU9BLFNBQVNPLFlBQVQsQ0FBc0JiLEtBQXRCLEVBQTZCUyxLQUE3QixFQUFtQztBQUNsQyxLQUFJVCxNQUFNSSxNQUFWLEVBQWlCO0FBQ2hCLE1BQU1VLFFBQVFmLFlBQVlDLEtBQVosRUFBbUJTLE1BQU1SLElBQXpCLENBQWQ7QUFDQUQsUUFBTWUsTUFBTixDQUFhRCxRQUFRLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCTCxLQUEzQjtBQUNBLEVBSEQsTUFHTztBQUNOVCxRQUFNZ0IsSUFBTixDQUFXUCxLQUFYO0FBQ0E7QUFDRDs7UUFFT0ksWSxHQUFBQSxZIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IGF0IG9yIGJlZm9yZSB0aGUgZ2l2ZW4gdGltZVxuICovXG5mdW5jdGlvbiBmaW5kRWxlbWVudChhcnJheSwgdGltZSkge1xuXHRsZXQgYmVnaW5uaW5nID0gMFxuXHRjb25zdCBsZW4gPSBhcnJheS5sZW5ndGhcblx0bGV0IGVuZCA9IGxlblxuXHRpZiAobGVuID4gMCAmJiBhcnJheVtsZW4gLSAxXS50aW1lIDw9IHRpbWUpe1xuXHRcdHJldHVybiBsZW4gLSAxXG5cdH1cblx0d2hpbGUgKGJlZ2lubmluZyA8IGVuZCl7XG5cdFx0Ly8gY2FsY3VsYXRlIHRoZSBtaWRwb2ludCBmb3Igcm91Z2hseSBlcXVhbCBwYXJ0aXRpb25cblx0XHRsZXQgbWlkUG9pbnQgPSBNYXRoLmZsb29yKGJlZ2lubmluZyArIChlbmQgLSBiZWdpbm5pbmcpIC8gMilcblx0XHRjb25zdCBldmVudCA9IGFycmF5W21pZFBvaW50XVxuXHRcdGNvbnN0IG5leHRFdmVudCA9IGFycmF5W21pZFBvaW50ICsgMV1cblx0XHRpZiAoZXZlbnQudGltZSA9PT0gdGltZSl7XG5cdFx0XHQvL2Nob29zZSB0aGUgbGFzdCBvbmUgdGhhdCBoYXMgdGhlIHNhbWUgdGltZVxuXHRcdFx0Zm9yIChsZXQgaSA9IG1pZFBvaW50OyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHRsZXQgdGVzdEV2ZW50ID0gYXJyYXlbaV1cblx0XHRcdFx0aWYgKHRlc3RFdmVudC50aW1lID09PSB0aW1lKXtcblx0XHRcdFx0XHRtaWRQb2ludCA9IGlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1pZFBvaW50XG5cdFx0fSBlbHNlIGlmIChldmVudC50aW1lIDwgdGltZSAmJiBuZXh0RXZlbnQudGltZSA+IHRpbWUpe1xuXHRcdFx0cmV0dXJuIG1pZFBvaW50XG5cdFx0fSBlbHNlIGlmIChldmVudC50aW1lID4gdGltZSl7XG5cdFx0XHQvL3NlYXJjaCBsb3dlclxuXHRcdFx0ZW5kID0gbWlkUG9pbnRcblx0XHR9IGVsc2UgaWYgKGV2ZW50LnRpbWUgPCB0aW1lKXtcblx0XHRcdC8vc2VhcmNoIHVwcGVyXG5cdFx0XHRiZWdpbm5pbmcgPSBtaWRQb2ludCArIDFcblx0XHR9IFxuXHR9XG5cdHJldHVybiAtMVxufVxuXG4vKipcbiAqIERvZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGluc2VydCB0aGUgbm90ZVxuICogaW4gdGhlIGNvcnJlY3Qgc3BvdCBpbiB0aGUgYXJyYXlcbiAqIEBwYXJhbSAge0FycmF5fSBhcnJheVxuICogQHBhcmFtICB7T2JqZWN0fSBldmVudFxuICogQHBhcmFtICB7TnVtYmVyPX0gb2Zmc2V0XG4gKi9cbmZ1bmN0aW9uIEJpbmFyeUluc2VydChhcnJheSwgZXZlbnQpe1xuXHRpZiAoYXJyYXkubGVuZ3RoKXtcblx0XHRjb25zdCBpbmRleCA9IGZpbmRFbGVtZW50KGFycmF5LCBldmVudC50aW1lKVxuXHRcdGFycmF5LnNwbGljZShpbmRleCArIDEsIDAsIGV2ZW50KVxuXHR9IGVsc2Uge1xuXHRcdGFycmF5LnB1c2goZXZlbnQpXG5cdH1cbn1cblxuZXhwb3J0IHtCaW5hcnlJbnNlcnR9XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0JpbmFyeUluc2VydC5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 11 */
/***/ function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n/**\n *  Parse tempo and time signature from the midiJson\n *  @param  {Object}  midiJson \n *  @return  {Object}\n */\nfunction parseHeader(midiJson) {\n\tvar ret = {\n\t\tPPQ: midiJson.header.ticksPerBeat\n\t};\n\tfor (var i = 0; i < midiJson.tracks.length; i++) {\n\t\tvar track = midiJson.tracks[i];\n\t\tfor (var j = 0; j < track.length; j++) {\n\t\t\tvar datum = track[j];\n\t\t\tif (datum.type === \"meta\") {\n\t\t\t\tif (datum.subtype === \"timeSignature\") {\n\t\t\t\t\tret.timeSignature = [datum.numerator, datum.denominator];\n\t\t\t\t} else if (datum.subtype === \"setTempo\") {\n\t\t\t\t\tif (!ret.bpm) {\n\t\t\t\t\t\tret.bpm = 60000000 / datum.microsecondsPerBeat;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tret.bpm = ret.bpm || 120;\n\treturn ret;\n}\n\nexports.parseHeader = parseHeader;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSGVhZGVyLmpzP2RhZTYiXSwibmFtZXMiOlsicGFyc2VIZWFkZXIiLCJtaWRpSnNvbiIsInJldCIsIlBQUSIsImhlYWRlciIsInRpY2tzUGVyQmVhdCIsImkiLCJ0cmFja3MiLCJsZW5ndGgiLCJ0cmFjayIsImoiLCJkYXR1bSIsInR5cGUiLCJzdWJ0eXBlIiwidGltZVNpZ25hdHVyZSIsIm51bWVyYXRvciIsImRlbm9taW5hdG9yIiwiYnBtIiwibWljcm9zZWNvbmRzUGVyQmVhdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7QUFLQSxTQUFTQSxXQUFULENBQXFCQyxRQUFyQixFQUE4QjtBQUM3QixLQUFJQyxNQUFNO0FBQ1RDLE9BQU1GLFNBQVNHLE1BQVQsQ0FBZ0JDO0FBRGIsRUFBVjtBQUdBLE1BQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJTCxTQUFTTSxNQUFULENBQWdCQyxNQUFwQyxFQUE0Q0YsR0FBNUMsRUFBZ0Q7QUFDL0MsTUFBSUcsUUFBUVIsU0FBU00sTUFBVCxDQUFnQkQsQ0FBaEIsQ0FBWjtBQUNBLE9BQUssSUFBSUksSUFBSSxDQUFiLEVBQWdCQSxJQUFJRCxNQUFNRCxNQUExQixFQUFrQ0UsR0FBbEMsRUFBc0M7QUFDckMsT0FBSUMsUUFBUUYsTUFBTUMsQ0FBTixDQUFaO0FBQ0EsT0FBSUMsTUFBTUMsSUFBTixLQUFlLE1BQW5CLEVBQTBCO0FBQ3pCLFFBQUlELE1BQU1FLE9BQU4sS0FBa0IsZUFBdEIsRUFBc0M7QUFDckNYLFNBQUlZLGFBQUosR0FBb0IsQ0FBQ0gsTUFBTUksU0FBUCxFQUFrQkosTUFBTUssV0FBeEIsQ0FBcEI7QUFDQSxLQUZELE1BRU8sSUFBSUwsTUFBTUUsT0FBTixLQUFrQixVQUF0QixFQUFpQztBQUN2QyxTQUFJLENBQUNYLElBQUllLEdBQVQsRUFBYTtBQUNaZixVQUFJZSxHQUFKLEdBQVUsV0FBV04sTUFBTU8sbUJBQTNCO0FBQ0E7QUFDRDtBQUNEO0FBQ0Q7QUFDRDtBQUNEaEIsS0FBSWUsR0FBSixHQUFVZixJQUFJZSxHQUFKLElBQVcsR0FBckI7QUFDQSxRQUFPZixHQUFQO0FBQ0E7O1FBRU9GLFcsR0FBQUEsVyIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIFBhcnNlIHRlbXBvIGFuZCB0aW1lIHNpZ25hdHVyZSBmcm9tIHRoZSBtaWRpSnNvblxuICogIEBwYXJhbSAge09iamVjdH0gIG1pZGlKc29uIFxuICogIEByZXR1cm4gIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlSGVhZGVyKG1pZGlKc29uKXtcblx0dmFyIHJldCA9IHtcblx0XHRQUFEgOiBtaWRpSnNvbi5oZWFkZXIudGlja3NQZXJCZWF0XG5cdH1cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtaWRpSnNvbi50cmFja3MubGVuZ3RoOyBpKyspe1xuXHRcdHZhciB0cmFjayA9IG1pZGlKc29uLnRyYWNrc1tpXVxuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgdHJhY2subGVuZ3RoOyBqKyspe1xuXHRcdFx0dmFyIGRhdHVtID0gdHJhY2tbal1cblx0XHRcdGlmIChkYXR1bS50eXBlID09PSBcIm1ldGFcIil7XG5cdFx0XHRcdGlmIChkYXR1bS5zdWJ0eXBlID09PSBcInRpbWVTaWduYXR1cmVcIil7XG5cdFx0XHRcdFx0cmV0LnRpbWVTaWduYXR1cmUgPSBbZGF0dW0ubnVtZXJhdG9yLCBkYXR1bS5kZW5vbWluYXRvcl1cblx0XHRcdFx0fSBlbHNlIGlmIChkYXR1bS5zdWJ0eXBlID09PSBcInNldFRlbXBvXCIpe1xuXHRcdFx0XHRcdGlmICghcmV0LmJwbSl7XG5cdFx0XHRcdFx0XHRyZXQuYnBtID0gNjAwMDAwMDAgLyBkYXR1bS5taWNyb3NlY29uZHNQZXJCZWF0XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IFxuXHRcdH1cblx0fVxuXHRyZXQuYnBtID0gcmV0LmJwbSB8fCAxMjBcblx0cmV0dXJuIHJldFxufVxuXG5leHBvcnQge3BhcnNlSGVhZGVyfVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9IZWFkZXIuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }
/******/ ])
});
;